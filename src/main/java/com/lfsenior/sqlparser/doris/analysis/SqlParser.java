
//----------------------------------------------------
// The following code was generated by CUP v0.11a czt01 beta
// Wed Sep 29 17:11:46 CST 2021
//----------------------------------------------------

package com.lfsenior.sqlparser.doris.analysis;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import com.lfsenior.sqlparser.doris.catalog.AggregateType;
import com.lfsenior.sqlparser.doris.catalog.KeysType;
import com.lfsenior.sqlparser.doris.catalog.ScalarType;
import com.lfsenior.sqlparser.doris.catalog.Type;
import com.lfsenior.sqlparser.doris.common.AnalysisException;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import java_cup.runtime.Symbol;

/** CUP v0.11a czt01 beta generated parser.
  * @version Wed Sep 29 17:11:46 CST 2021
  */
public class SqlParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SqlParser() {super();}

  /** Constructor which sets the default scanner. */
  public SqlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SqlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0137\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\003\003\000\002\003\003\000\002\003\002" +
    "\000\002\056\011\000\002\054\003\000\002\054\005\000" +
    "\002\046\002\000\002\046\004\000\002\046\004\000\002" +
    "\045\002\000\002\045\004\000\002\047\002\000\002\047" +
    "\003\000\002\047\004\000\002\041\002\000\002\041\007" +
    "\000\002\004\011\000\002\004\022\000\002\004\024\000" +
    "\002\005\006\000\002\005\010\000\002\005\010\000\002" +
    "\052\003\000\002\052\005\000\002\051\010\000\002\051" +
    "\011\000\002\051\007\000\002\051\010\000\002\051\011" +
    "\000\002\051\006\000\002\051\007\000\002\051\010\000" +
    "\002\051\011\000\002\051\013\000\002\051\013\000\002" +
    "\051\007\000\002\051\007\000\002\051\004\000\002\051" +
    "\006\000\002\051\006\000\002\051\006\000\002\051\004" +
    "\000\002\051\005\000\002\051\006\000\002\016\002\000" +
    "\002\016\007\000\002\023\002\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\024\002" +
    "\000\002\024\013\000\002\050\002\000\002\050\003\000" +
    "\002\066\002\000\002\066\004\000\002\070\002\000\002" +
    "\070\003\000\002\031\002\000\002\031\003\000\002\032" +
    "\006\000\002\032\007\000\002\032\006\000\002\032\007" +
    "\000\002\032\004\000\002\032\005\000\002\025\002\000" +
    "\002\025\011\000\002\025\006\000\002\053\002\000\002" +
    "\053\006\000\002\026\002\000\002\026\004\000\002\030" +
    "\002\000\002\030\007\000\002\030\007\000\002\030\007" +
    "\000\002\037\002\000\002\037\003\000\002\040\005\000" +
    "\002\040\003\000\002\036\012\000\002\036\010\000\002" +
    "\033\003\000\002\033\005\000\002\035\002\000\002\035" +
    "\005\000\002\035\005\000\002\035\003\000\002\035\003" +
    "\000\002\034\013\000\002\063\002\000\002\063\005\000" +
    "\002\013\002\000\002\013\005\000\002\012\005\000\002" +
    "\012\007\000\002\014\002\000\002\014\006\000\002\015" +
    "\002\000\002\015\007\000\002\021\003\000\002\021\005" +
    "\000\002\022\003\000\002\022\005\000\002\064\002\000" +
    "\002\064\004\000\002\064\004\000\002\044\002\000\002" +
    "\044\003\000\002\017\011\000\002\020\011\000\002\043" +
    "\002\000\002\043\003\000\002\043\004\000\002\062\002" +
    "\000\002\062\004\000\002\071\002\000\002\071\004\000" +
    "\002\065\002\000\002\065\005\000\002\067\002\000\002" +
    "\067\003\000\002\007\003\000\002\007\005\000\002\006" +
    "\003\000\002\006\005\000\002\011\004\000\002\011\004" +
    "\000\002\011\005\000\002\011\004\000\002\011\004\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\006\000\002\011\003" +
    "\000\002\011\006\000\002\011\003\000\002\011\006\000" +
    "\002\011\010\000\002\011\003\000\002\011\003\000\002" +
    "\027\005\000\002\027\002\000\002\072\002\000\002\072" +
    "\003\000\002\072\003\000\002\010\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\060\003\000\002\060\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    loadTableFromFile("action_table");

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u020b\000\012\002\004\003\006\004\003\005\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\015" +
    "\001\001\000\002\001\001\000\012\007\210\057\077\060" +
    "\121\061\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\u017c\057\077\060\121\061\201\001" +
    "\001\000\014\017\251\021\252\057\077\060\250\061\201" +
    "\001\001\000\010\010\u014e\011\u0143\072\u0146\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\u0129\020\u012a" +
    "\022\u0128\057\077\060\250\061\201\001\001\000\004\063" +
    "\256\001\001\000\002\001\001\000\004\030\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\263\001\001\000\004\024\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\356\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\273\057\077\060\274\061\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\057\077\060\354\061\201" +
    "\001\001\000\002\001\001\000\010\036\300\037\301\040" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\306\001\001\000\002\001\001\000\004\036\305\001" +
    "\001\000\002\001\001\000\010\057\077\060\307\061\201" +
    "\001\001\000\002\001\001\000\004\034\312\001\001\000" +
    "\002\001\001\000\004\013\332\001\001\000\002\001\001" +
    "\000\004\035\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\324\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\333\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\345\001\001\000\004\013\352\001\001\000\002\001" +
    "\001\000\004\035\350\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\360\001\001\000\002" +
    "\001\001\000\004\014\361\001\001\000\004\015\366\001" +
    "\001\000\002\001\001\000\004\012\364\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\372\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\054\376\056\375\057" +
    "\077\060\377\061\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\u0101\057\077\060" +
    "\274\061\201\001\001\000\002\001\001\000\004\041\u0103" +
    "\001\001\000\004\045\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\u0107\057\077\060\274\061\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u010c\001\001\000\010\057\077\060\u010b\061\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\056\u010f\057" +
    "\077\060\377\061\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\u0119\001\001\000" +
    "\002\001\001\000\012\006\u0114\057\077\060\274\061\201" +
    "\001\001\000\002\001\001\000\004\026\u0116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\u011c\057\077\060" +
    "\274\061\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\u0120\057\077\060\274\061" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\u0124\057\077\060\274\061\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\057\077" +
    "\060\u0127\061\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\057\077" +
    "\060\u012c\061\201\001\001\000\002\001\001\000\012\006" +
    "\u012e\057\077\060\274\061\201\001\001\000\002\001\001" +
    "\000\004\071\u0130\001\001\000\004\062\u0133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u013e\001\001\000\004\063\u0136\001\001\000\004\030" +
    "\u0137\001\001\000\004\062\u0138\001\001\000\004\024\u0139" +
    "\001\001\000\004\025\u013a\001\001\000\004\053\u013b\001" +
    "\001\000\004\014\u013c\001\001\000\004\015\u013d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u0178\001\001\000\004\027\u0177" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u0176\001\001\000\002\001\001\000\004\027\u0171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\u0158\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u015d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u0162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\u0165\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\u0169\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\u0175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\057\077\060\u017e\061\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\u0182\057\077\060\121\061\201\001\001\000\006" +
    "\051\u0187\052\u0189\001\001\000\002\001\001\000\006\020" +
    "\u01df\050\u01de\001\001\000\004\050\u01cf\001\001\000\010" +
    "\057\077\060\u01fc\061\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\u018e\032\u018f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\057\077\060\u0196\061\201\001\001\000\002\001" +
    "\001\000\010\057\077\060\u0194\061\201\001\001\000\004" +
    "\014\u0195\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\u0198\057\077\060\274\061\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\057" +
    "\077\060\u019c\061\201\001\001\000\002\001\001\000\012" +
    "\006\u019e\057\077\060\274\061\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\u01a1\057\077\060\274" +
    "\061\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\u01a4\032\u018f\001\001\000\004\014\u01a5\001\001" +
    "\000\002\001\001\000\012\006\u01a7\057\077\060\274\061" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\u01ab\057\077\060\274\061\201\001" +
    "\001\000\002\001\001\000\004\045\u01ad\001\001\000\004" +
    "\014\u01ae\001\001\000\002\001\001\000\012\017\u01c3\057" +
    "\077\060\250\061\201\001\001\000\010\057\077\060\u01b1" +
    "\061\201\001\001\000\002\001\001\000\012\006\u01b3\057" +
    "\077\060\274\061\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u01b8\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u01bd\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u01c1\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\u01c6\001\001\000\002\001\001\000\010\057\077" +
    "\060\u01c9\061\201\001\001\000\004\045\u01c7\001\001\000" +
    "\004\014\u01c8\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\u01cd\001\001\000\006\020\u01df\050\u01de\001" +
    "\001\000\004\050\u01cf\001\001\000\002\001\001\000\010" +
    "\057\077\060\u01da\061\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\057\077\060\u01d2\061\201\001\001" +
    "\000\002\001\001\000\004\066\u01d5\001\001\000\002\001" +
    "\001\000\010\057\077\060\u01d6\061\201\001\001\000\004" +
    "\070\u01d8\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\u01db\001\001\000\004\014\u01dc" +
    "\001\001\000\002\001\001\000\012\017\u01e3\057\077\060" +
    "\250\061\201\001\001\000\004\036\u01e0\001\001\000\002" +
    "\001\001\000\004\025\u01e1\001\001\000\004\014\u01e2\001" +
    "\001\000\002\001\001\000\004\047\u01ee\001\001\000\014" +
    "\017\251\021\u01e5\057\077\060\250\061\201\001\001\000" +
    "\002\001\001\000\012\017\u0129\057\077\060\250\061\201" +
    "\001\001\000\004\046\u01e8\001\001\000\004\014\u01ed\001" +
    "\001\000\010\057\077\060\u01ec\061\201\001\001\000\010" +
    "\057\077\060\u01eb\061\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\u01ef\001\001" +
    "\000\004\014\u01f0\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u01f3\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u01f7\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\057\077\060\u0201" +
    "\061\201\001\001\000\010\057\077\060\u01ff\061\201\001" +
    "\001\000\010\057\077\060\u01fd\061\201\001\001\000\002" +
    "\001\001\000\010\057\077\060\u01fe\061\201\001\001\000" +
    "\002\001\001\000\010\057\077\060\u0200\061\201\001\001" +
    "\000\002\001\001\000\010\057\077\060\u0202\061\201\001" +
    "\001\000\002\001\001\000\004\055\u0204\001\001\000\002" +
    "\001\001\000\014\054\u0206\056\375\057\077\060\377\061" +
    "\201\001\001\000\002\001\001\000\004\012\u0208\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\u020c\004" +
    "\003\005\007\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}


  /** Load external table from file. */
  private static short[][] loadTableFromFile(String tableName)
  {
    String tableFileName = tableName + ".dat";
    java.io.InputStream is = SqlParser.class.getResourceAsStream(tableFileName);
    if (is == null) {
      throw new RuntimeException("Cannot find external parser table " + tableFileName);
    }

    try {
      try {

        java.io.ObjectInputStream in = new java.io.ObjectInputStream(is);
        try {
          return (short[][]) in.readObject();
        } finally {
          in.close();
        }

      } finally {
        is.close();
      }
    } catch (Exception e) {
      throw new RuntimeException("Cannot load external parser table " + tableFileName, e);
    }
  }
  /** Instance of action encapsulation class. */
  protected CUP$SqlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$SqlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SqlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  @Override
  public int error_sym() {return 1;}



    private Symbol errorToken;
    public boolean isVerbose = false;
    public String wild;

    // List of expected tokens ids from current parsing state for generating syntax error message
    private final List<Integer> expectedTokenIds = Lists.newArrayList();

    // To avoid reporting trivial tokens as expected tokens in error messages
    private boolean reportExpectedToken(Integer tokenId) {
        if (SqlScanner.isKeyword(tokenId) ||
                tokenId.intValue() == SqlParserSymbols.COMMA ||
                tokenId.intValue() == SqlParserSymbols.IDENT) {
            return true;
        } else {
            return false;
        }
    }

    private String getErrorTypeMessage(int lastTokenId) {
        String msg = null;
        switch(lastTokenId) {
            case SqlParserSymbols.UNMATCHED_STRING_LITERAL:
                msg = "Unmatched string literal";
                break;
            case SqlParserSymbols.NUMERIC_OVERFLOW:
                msg = "Numeric overflow";
                break;
            default:
                msg = "Syntax error";
                break;
        }
        return msg;
    }

    // Override to save error token, just update error information.
    @Override
    public void syntax_error(Symbol token) {
        errorToken = token;

        // derive expected tokens from current parsing state
        expectedTokenIds.clear();
        int state = ((Symbol)stack.peek()).parse_state;
        // get row of actions table corresponding to current parsing state
        // the row consists of pairs of <tokenId, actionId>
        // a pair is stored as row[i] (tokenId) and row[i+1] (actionId)
        // the last pair is a special error action
        short[] row = action_tab[state];
        short tokenId;
        // the expected tokens are all the symbols with a
        // corresponding action from the current parsing state
        for (int i = 0; i < row.length-2; ++i) {
            // Get tokenId and skip actionId
            tokenId = row[i++];
            expectedTokenIds.add(Integer.valueOf(tokenId));
        }
    }

    // Override to keep it from calling report_fatal_error()
    // This exception is not AnalysisException because we don't want this report to client.
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws AnalysisException {
        throw new AnalysisException(getErrorTypeMessage(cur_token.sym));
    }


    // Manually throw a parse error on a given symbol for special circumstances.
    public void parseError(String symbolName, int symbolId) throws AnalysisException {
        Symbol errorToken = getSymbolFactory().newSymbol(symbolName, symbolId,
                ((Symbol) stack.peek()), ((Symbol) stack.peek()), null);
        // Call syntax error to gather information about expected tokens, etc.
        // syntax_error does not throw an exception
        syntax_error(errorToken);

        unrecovered_syntax_error(errorToken);
    }

    // Returns error string, consisting of the original
    // stmt with a '^' under the offending token. Assumes
    // that parse() has been called and threw an exception
    public String getErrorMsg(String stmt) {
        if (errorToken == null || stmt == null) {
            return null;
        }
        String[] lines = stmt.split("\n", -1);
        StringBuffer result = new StringBuffer();
        result.append(getErrorTypeMessage(errorToken.sym) + " in line ");
        result.append(errorToken.left);
        result.append(":\n");

        // errorToken_.left is the line number of error.
        // errorToken_.right is the column number of the error.
        // index is start from 0, so "minus 1" is the real error line idx
        String errorLine = lines[errorToken.left - 1];
        // If the error is that additional tokens are expected past the end,
        // errorToken_.right will be past the end of the string.
        int lastCharIndex = Math.min(errorLine.length(), errorToken.right);
        int maxPrintLength = 60;
        int errorLoc = 0;
        if (errorLine.length() <= maxPrintLength) {
            // The line is short. Print the entire line.
            result.append(errorLine);
            result.append('\n');
            errorLoc = errorToken.right;
        } else {
            // The line is too long. Print maxPrintLength/2 characters before the error and
            // after the error.
            int contextLength = maxPrintLength / 2 - 3;
            String leftSubStr;
            if (errorToken.right > maxPrintLength / 2) {
                leftSubStr = "..." + errorLine.substring(errorToken.right - contextLength,
                        lastCharIndex);
            } else {
                leftSubStr = errorLine.substring(0, errorToken.right);
            }
            errorLoc = leftSubStr.length();
            result.append(leftSubStr);
            if (errorLine.length() - errorToken.right > maxPrintLength / 2) {
                result.append(errorLine.substring(errorToken.right,
                            errorToken.right + contextLength) + "...");
            } else {
                result.append(errorLine.substring(lastCharIndex));
            }
            result.append("\n");
        }

        // print error indicator
        for (int i = 0; i < errorLoc - 1; ++i) {
            result.append(' ');
        }
        result.append("^\n");

        // only report encountered and expected tokens for syntax errors
        if (errorToken.sym == SqlParserSymbols.UNMATCHED_STRING_LITERAL ||
                errorToken.sym == SqlParserSymbols.NUMERIC_OVERFLOW) {
            return result.toString();
        }

        // append last encountered token
        result.append("Encountered: ");
        String lastToken = SqlScanner.tokenIdMap.get(Integer.valueOf(errorToken.sym));
        if (lastToken != null) {
            result.append(lastToken);
        } else if (SqlScanner.isKeyword((String) errorToken.value)) {
            result.append("A reserved word cannot be used as an identifier: ").append((String) errorToken.value);
        } else {
            result.append("Unknown last token with id: " + errorToken.sym);
        }

        // Append expected tokens
        result.append('\n');
        result.append("Expected: ");
        String expectedToken = null;
        Integer tokenId = null;
        for (int i = 0; i < expectedTokenIds.size(); ++i) {
            tokenId = expectedTokenIds.get(i);
            // keywords hints
            if (SqlScanner.isKeyword(lastToken) && tokenId.intValue() == SqlParserSymbols.IDENT) {
                result.append(String.format("%s is keyword, maybe `%s`", lastToken, lastToken) + ", ");
                continue;
            }

            if (reportExpectedToken(tokenId)) {
                expectedToken = SqlScanner.tokenIdMap.get(tokenId);
                result.append(expectedToken + ", ");
            }
        }
        // remove trailing ", "
        result.delete(result.length() - 2, result.length());
        result.append('\n');

        return result.toString();
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SqlParser$actions {
  private final SqlParser parser;

  /** Constructor */
  CUP$SqlParser$actions(SqlParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SqlParser$do_action(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SqlParser$result;

      /* select the action based on the action number */
      switch (CUP$SqlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // time_unit ::= KW_SECOND 
            {
               CUP$SqlParser$result = case310(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // time_unit ::= KW_MINUTE 
            {
               CUP$SqlParser$result = case309(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // time_unit ::= KW_HOUR 
            {
               CUP$SqlParser$result = case308(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // time_unit ::= KW_DAY 
            {
               CUP$SqlParser$result = case307(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // time_unit ::= KW_WEEK 
            {
               CUP$SqlParser$result = case306(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // time_unit ::= KW_MONTH 
            {
               CUP$SqlParser$result = case305(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // time_unit ::= KW_YEAR 
            {
               CUP$SqlParser$result = case304(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // ident ::= keyword 
            {
               CUP$SqlParser$result = case303(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ident ::= IDENT 
            {
               CUP$SqlParser$result = case302(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // keyword ::= KW_FEATURE 
            {
               CUP$SqlParser$result = case301(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // keyword ::= KW_ENABLE 
            {
               CUP$SqlParser$result = case300(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // keyword ::= time_unit 
            {
               CUP$SqlParser$result = case299(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // keyword ::= KW_DYNAMIC 
            {
               CUP$SqlParser$result = case298(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // keyword ::= KW_GROUPING 
            {
               CUP$SqlParser$result = case297(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // keyword ::= KW_STOP 
            {
               CUP$SqlParser$result = case296(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // keyword ::= KW_RESUME 
            {
               CUP$SqlParser$result = case295(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // keyword ::= KW_PAUSE 
            {
               CUP$SqlParser$result = case294(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // keyword ::= KW_ROUTINE 
            {
               CUP$SqlParser$result = case293(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // keyword ::= KW_TASK 
            {
               CUP$SqlParser$result = case292(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // keyword ::= KW_FREE 
            {
               CUP$SqlParser$result = case291(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // keyword ::= KW_MAX 
            {
               CUP$SqlParser$result = case290(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // keyword ::= KW_MIN 
            {
               CUP$SqlParser$result = case289(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // keyword ::= KW_SUM 
            {
               CUP$SqlParser$result = case288(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // keyword ::= KW_COUNT 
            {
               CUP$SqlParser$result = case287(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // keyword ::= KW_MIGRATIONS 
            {
               CUP$SqlParser$result = case286(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // keyword ::= KW_MIGRATE 
            {
               CUP$SqlParser$result = case285(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // keyword ::= KW_LINK 
            {
               CUP$SqlParser$result = case284(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // keyword ::= KW_CLUSTERS 
            {
               CUP$SqlParser$result = case283(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // keyword ::= KW_CLUSTER 
            {
               CUP$SqlParser$result = case282(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // keyword ::= KW_WORK 
            {
               CUP$SqlParser$result = case281(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // keyword ::= KW_WARNINGS 
            {
               CUP$SqlParser$result = case280(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // keyword ::= KW_VIEW 
            {
               CUP$SqlParser$result = case279(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // keyword ::= KW_VERBOSE 
            {
               CUP$SqlParser$result = case278(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // keyword ::= KW_VALUE 
            {
               CUP$SqlParser$result = case277(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // keyword ::= KW_VARIABLES 
            {
               CUP$SqlParser$result = case276(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // keyword ::= KW_USER 
            {
               CUP$SqlParser$result = case275(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // keyword ::= KW_UNCOMMITTED 
            {
               CUP$SqlParser$result = case274(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // keyword ::= KW_TYPES 
            {
               CUP$SqlParser$result = case273(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // keyword ::= KW_TYPE 
            {
               CUP$SqlParser$result = case272(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // keyword ::= KW_TRUNCATE 
            {
               CUP$SqlParser$result = case271(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // keyword ::= KW_TRIGGERS 
            {
               CUP$SqlParser$result = case270(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // keyword ::= KW_TRANSACTION 
            {
               CUP$SqlParser$result = case269(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // keyword ::= KW_TIMESTAMP 
            {
               CUP$SqlParser$result = case268(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // keyword ::= KW_THAN 
            {
               CUP$SqlParser$result = case267(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // keyword ::= KW_TEMPORARY 
            {
               CUP$SqlParser$result = case266(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // keyword ::= KW_TABLES 
            {
               CUP$SqlParser$result = case265(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // keyword ::= KW_STRING 
            {
               CUP$SqlParser$result = case264(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // keyword ::= KW_STORAGE 
            {
               CUP$SqlParser$result = case263(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // keyword ::= KW_STATUS 
            {
               CUP$SqlParser$result = case262(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // keyword ::= KW_START 
            {
               CUP$SqlParser$result = case261(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // keyword ::= KW_SPLIT 
            {
               CUP$SqlParser$result = case260(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // keyword ::= KW_SONAME 
            {
               CUP$SqlParser$result = case259(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // keyword ::= KW_SNAPSHOT 
            {
               CUP$SqlParser$result = case258(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // keyword ::= KW_SESSION 
            {
               CUP$SqlParser$result = case257(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // keyword ::= KW_SERIALIZABLE 
            {
               CUP$SqlParser$result = case256(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // keyword ::= KW_SCHEMA 
            {
               CUP$SqlParser$result = case255(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // keyword ::= KW_ROLLUP 
            {
               CUP$SqlParser$result = case254(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // keyword ::= KW_ROLLBACK 
            {
               CUP$SqlParser$result = case253(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // keyword ::= KW_RETURNS 
            {
               CUP$SqlParser$result = case252(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // keyword ::= KW_RESTORE 
            {
               CUP$SqlParser$result = case251(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // keyword ::= KW_RESOURCES 
            {
               CUP$SqlParser$result = case250(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // keyword ::= KW_RESOURCE 
            {
               CUP$SqlParser$result = case249(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // keyword ::= KW_REPOSITORIES 
            {
               CUP$SqlParser$result = case248(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // keyword ::= KW_REPOSITORY 
            {
               CUP$SqlParser$result = case247(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // keyword ::= KW_REPLACE_IF_NOT_NULL 
            {
               CUP$SqlParser$result = case246(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // keyword ::= KW_REPLACE 
            {
               CUP$SqlParser$result = case245(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // keyword ::= KW_REPEATABLE 
            {
               CUP$SqlParser$result = case244(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // keyword ::= KW_RECOVER 
            {
               CUP$SqlParser$result = case243(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // keyword ::= KW_RANDOM 
            {
               CUP$SqlParser$result = case242(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // keyword ::= KW_QUOTA 
            {
               CUP$SqlParser$result = case241(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // keyword ::= KW_QUERY 
            {
               CUP$SqlParser$result = case240(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // keyword ::= KW_PROPERTY 
            {
               CUP$SqlParser$result = case239(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // keyword ::= KW_PROPERTIES 
            {
               CUP$SqlParser$result = case238(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // keyword ::= KW_PROCESSLIST 
            {
               CUP$SqlParser$result = case237(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // keyword ::= KW_PROC 
            {
               CUP$SqlParser$result = case236(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // keyword ::= KW_PLUGINS 
            {
               CUP$SqlParser$result = case235(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // keyword ::= KW_PLUGIN 
            {
               CUP$SqlParser$result = case234(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // keyword ::= KW_PASSWORD 
            {
               CUP$SqlParser$result = case233(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // keyword ::= KW_PARTITIONS 
            {
               CUP$SqlParser$result = case232(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // keyword ::= KW_OPEN 
            {
               CUP$SqlParser$result = case231(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // keyword ::= KW_ONLY 
            {
               CUP$SqlParser$result = case230(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // keyword ::= KW_OFFSET 
            {
               CUP$SqlParser$result = case229(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // keyword ::= KW_NULLS 
            {
               CUP$SqlParser$result = case228(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // keyword ::= KW_NO 
            {
               CUP$SqlParser$result = case227(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // keyword ::= KW_NEGATIVE 
            {
               CUP$SqlParser$result = case226(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // keyword ::= KW_NAMES 
            {
               CUP$SqlParser$result = case225(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // keyword ::= KW_NAME 
            {
               CUP$SqlParser$result = case224(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // keyword ::= KW_MODIFY 
            {
               CUP$SqlParser$result = case223(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // keyword ::= KW_MERGE 
            {
               CUP$SqlParser$result = case222(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // keyword ::= KW_MATERIALIZED 
            {
               CUP$SqlParser$result = case221(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // keyword ::= KW_LOCATION 
            {
               CUP$SqlParser$result = case220(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // keyword ::= KW_LOCAL 
            {
               CUP$SqlParser$result = case219(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // keyword ::= KW_LEVEL 
            {
               CUP$SqlParser$result = case218(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // keyword ::= KW_LESS 
            {
               CUP$SqlParser$result = case217(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // keyword ::= KW_LAST 
            {
               CUP$SqlParser$result = case216(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // keyword ::= KW_LABEL 
            {
               CUP$SqlParser$result = case215(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // keyword ::= KW_ISOLATION 
            {
               CUP$SqlParser$result = case214(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // keyword ::= KW_ISNULL 
            {
               CUP$SqlParser$result = case213(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // keyword ::= KW_INDEXES 
            {
               CUP$SqlParser$result = case212(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // keyword ::= KW_IDENTIFIED 
            {
               CUP$SqlParser$result = case211(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // keyword ::= KW_HUB 
            {
               CUP$SqlParser$result = case210(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // keyword ::= KW_HELP 
            {
               CUP$SqlParser$result = case209(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // keyword ::= KW_HASH 
            {
               CUP$SqlParser$result = case208(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // keyword ::= KW_GLOBAL 
            {
               CUP$SqlParser$result = case207(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // keyword ::= KW_EXTERNAL 
            {
               CUP$SqlParser$result = case206(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // keyword ::= KW_EVENTS 
            {
               CUP$SqlParser$result = case205(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // keyword ::= KW_EXCLUDE 
            {
               CUP$SqlParser$result = case204(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // keyword ::= KW_ERRORS 
            {
               CUP$SqlParser$result = case203(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // keyword ::= KW_ENGINES 
            {
               CUP$SqlParser$result = case202(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // keyword ::= KW_ENGINE 
            {
               CUP$SqlParser$result = case201(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // keyword ::= KW_END 
            {
               CUP$SqlParser$result = case200(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // keyword ::= KW_FUNCTION 
            {
               CUP$SqlParser$result = case199(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // keyword ::= KW_PATH 
            {
               CUP$SqlParser$result = case198(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // keyword ::= KW_HLL_UNION 
            {
               CUP$SqlParser$result = case197(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // keyword ::= KW_FORMAT 
            {
               CUP$SqlParser$result = case196(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // keyword ::= KW_FIRST 
            {
               CUP$SqlParser$result = case195(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // keyword ::= KW_FILTER 
            {
               CUP$SqlParser$result = case194(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // keyword ::= KW_FILE 
            {
               CUP$SqlParser$result = case193(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // keyword ::= KW_BUCKETS 
            {
               CUP$SqlParser$result = case192(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // keyword ::= KW_DISTINCTPCSA 
            {
               CUP$SqlParser$result = case191(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // keyword ::= KW_DISTINCTPC 
            {
               CUP$SqlParser$result = case190(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // keyword ::= KW_DATETIME 
            {
               CUP$SqlParser$result = case189(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // keyword ::= KW_DATE 
            {
               CUP$SqlParser$result = case188(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // keyword ::= KW_DATA 
            {
               CUP$SqlParser$result = case187(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // keyword ::= KW_CONVERT 
            {
               CUP$SqlParser$result = case186(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // keyword ::= KW_CONNECTION_ID 
            {
               CUP$SqlParser$result = case185(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // keyword ::= KW_CONNECTION 
            {
               CUP$SqlParser$result = case184(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // keyword ::= KW_CONFIG 
            {
               CUP$SqlParser$result = case183(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // keyword ::= KW_COMMIT 
            {
               CUP$SqlParser$result = case182(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // keyword ::= KW_COLLATION 
            {
               CUP$SqlParser$result = case181(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // keyword ::= KW_CONSISTENT 
            {
               CUP$SqlParser$result = case180(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // keyword ::= KW_COMMITTED 
            {
               CUP$SqlParser$result = case179(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // keyword ::= KW_COMMENT 
            {
               CUP$SqlParser$result = case178(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // keyword ::= KW_COLUMNS 
            {
               CUP$SqlParser$result = case177(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // keyword ::= KW_CHECK 
            {
               CUP$SqlParser$result = case176(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // keyword ::= KW_CHARSET 
            {
               CUP$SqlParser$result = case175(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // keyword ::= KW_CHAIN 
            {
               CUP$SqlParser$result = case174(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // keyword ::= KW_BUILTIN 
            {
               CUP$SqlParser$result = case173(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // keyword ::= KW_BACKENDS 
            {
               CUP$SqlParser$result = case172(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // keyword ::= KW_HDFS 
            {
               CUP$SqlParser$result = case171(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // keyword ::= KW_S3 
            {
               CUP$SqlParser$result = case170(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // keyword ::= KW_BROKER 
            {
               CUP$SqlParser$result = case169(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // keyword ::= KW_BOOLEAN 
            {
               CUP$SqlParser$result = case168(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // keyword ::= KW_BITMAP_UNION 
            {
               CUP$SqlParser$result = case167(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // keyword ::= KW_BITMAP 
            {
               CUP$SqlParser$result = case166(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // keyword ::= KW_BEGIN 
            {
               CUP$SqlParser$result = case165(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // keyword ::= KW_BACKUP 
            {
               CUP$SqlParser$result = case164(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // keyword ::= KW_AUTHORS 
            {
               CUP$SqlParser$result = case163(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // keyword ::= KW_AGGREGATE 
            {
               CUP$SqlParser$result = case162(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // keyword ::= KW_AFTER 
            {
               CUP$SqlParser$result = case161(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // type_def ::= type 
            {
               CUP$SqlParser$result = case160(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // opt_signed_unsigned ::= KW_UNSIGNED 
            {
               CUP$SqlParser$result = case159(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // opt_signed_unsigned ::= KW_SIGNED 
            {
               CUP$SqlParser$result = case158(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // opt_signed_unsigned ::= 
            {
               CUP$SqlParser$result = case157(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // opt_field_length ::= 
            {
               CUP$SqlParser$result = case156(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // opt_field_length ::= LPAREN INTEGER_LITERAL RPAREN 
            {
               CUP$SqlParser$result = case155(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // type ::= KW_HLL 
            {
               CUP$SqlParser$result = case154(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // type ::= KW_DECIMAL 
            {
               CUP$SqlParser$result = case153(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // type ::= KW_DECIMAL LPAREN INTEGER_LITERAL COMMA INTEGER_LITERAL RPAREN 
            {
               CUP$SqlParser$result = case152(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // type ::= KW_DECIMAL LPAREN INTEGER_LITERAL RPAREN 
            {
               CUP$SqlParser$result = case151(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // type ::= KW_CHAR 
            {
               CUP$SqlParser$result = case150(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // type ::= KW_CHAR LPAREN INTEGER_LITERAL RPAREN 
            {
               CUP$SqlParser$result = case149(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // type ::= KW_VARCHAR 
            {
               CUP$SqlParser$result = case148(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // type ::= KW_VARCHAR LPAREN INTEGER_LITERAL RPAREN 
            {
               CUP$SqlParser$result = case147(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // type ::= KW_STRING 
            {
               CUP$SqlParser$result = case146(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // type ::= KW_BITMAP 
            {
               CUP$SqlParser$result = case145(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // type ::= KW_TIME 
            {
               CUP$SqlParser$result = case144(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // type ::= KW_DATETIME 
            {
               CUP$SqlParser$result = case143(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // type ::= KW_DATE 
            {
               CUP$SqlParser$result = case142(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // type ::= KW_DOUBLE 
            {
               CUP$SqlParser$result = case141(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // type ::= KW_FLOAT 
            {
               CUP$SqlParser$result = case140(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // type ::= KW_BOOLEAN 
            {
               CUP$SqlParser$result = case139(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // type ::= KW_LARGEINT opt_field_length 
            {
               CUP$SqlParser$result = case138(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // type ::= KW_BIGINT opt_field_length 
            {
               CUP$SqlParser$result = case137(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // type ::= opt_signed_unsigned KW_INT opt_field_length 
            {
               CUP$SqlParser$result = case136(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // type ::= KW_SMALLINT opt_field_length 
            {
               CUP$SqlParser$result = case135(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // type ::= KW_TINYINT opt_field_length 
            {
               CUP$SqlParser$result = case134(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ident_list ::= ident_list COMMA ident 
            {
               CUP$SqlParser$result = case133(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ident_list ::= ident 
            {
               CUP$SqlParser$result = case132(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // table_name ::= ident DOT ident 
            {
               CUP$SqlParser$result = case131(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // table_name ::= ident 
            {
               CUP$SqlParser$result = case130(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // opt_external ::= KW_EXTERNAL 
            {
               CUP$SqlParser$result = case129(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // opt_external ::= 
            {
               CUP$SqlParser$result = case128(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // opt_if_not_exists ::= KW_IF KW_NOT KW_EXISTS 
            {
               CUP$SqlParser$result = case127(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // opt_if_not_exists ::= 
            {
               CUP$SqlParser$result = case126(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // opt_index_type ::= KW_USING KW_BITMAP 
            {
               CUP$SqlParser$result = case125(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // opt_index_type ::= 
            {
               CUP$SqlParser$result = case124(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // opt_comment ::= KW_COMMENT STRING_LITERAL 
            {
               CUP$SqlParser$result = case123(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // opt_comment ::= 
            {
               CUP$SqlParser$result = case122(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // opt_is_allow_null ::= KW_NOT KW_NULL 
            {
               CUP$SqlParser$result = case121(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // opt_is_allow_null ::= KW_NULL 
            {
               CUP$SqlParser$result = case120(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // opt_is_allow_null ::= 
            {
               CUP$SqlParser$result = case119(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // index_definition ::= KW_INDEX ident LPAREN ident_list RPAREN opt_index_type opt_comment 
            {
               CUP$SqlParser$result = case118(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // column_definition ::= ident type_def opt_is_key opt_agg_type opt_is_allow_null opt_default_value opt_comment 
            {
               CUP$SqlParser$result = case117(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // opt_is_key ::= KW_KEY 
            {
               CUP$SqlParser$result = case116(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // opt_is_key ::= 
            {
               CUP$SqlParser$result = case115(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // opt_default_value ::= KW_DEFAULT KW_NULL 
            {
               CUP$SqlParser$result = case114(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // opt_default_value ::= KW_DEFAULT STRING_LITERAL 
            {
               CUP$SqlParser$result = case113(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // opt_default_value ::= 
            {
               CUP$SqlParser$result = case112(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // index_definition_list ::= index_definition_list COMMA index_definition 
            {
               CUP$SqlParser$result = case111(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // index_definition_list ::= index_definition 
            {
               CUP$SqlParser$result = case110(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // column_definition_list ::= column_definition_list COMMA column_definition 
            {
               CUP$SqlParser$result = case109(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // column_definition_list ::= column_definition 
            {
               CUP$SqlParser$result = case108(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // opt_ext_properties ::= KW_BROKER KW_PROPERTIES LPAREN key_value_map RPAREN 
            {
               CUP$SqlParser$result = case107(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // opt_ext_properties ::= 
            {
               CUP$SqlParser$result = case106(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // opt_properties ::= KW_PROPERTIES LPAREN key_value_map RPAREN 
            {
               CUP$SqlParser$result = case105(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opt_properties ::= 
            {
               CUP$SqlParser$result = case104(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // key_value_map ::= key_value_map COMMA STRING_LITERAL EQUAL STRING_LITERAL 
            {
               CUP$SqlParser$result = case103(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // key_value_map ::= STRING_LITERAL EQUAL STRING_LITERAL 
            {
               CUP$SqlParser$result = case102(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // opt_key_value_map ::= LPAREN key_value_map RPAREN 
            {
               CUP$SqlParser$result = case101(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // opt_key_value_map ::= 
            {
               CUP$SqlParser$result = case100(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opt_engine ::= KW_ENGINE EQUAL ident 
            {
               CUP$SqlParser$result = case99(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opt_engine ::= 
            {
               CUP$SqlParser$result = case98(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // fixed_partition_key_desc ::= LBRACKET LPAREN partition_key_list RPAREN COMMA LPAREN partition_key_list RPAREN RPAREN 
            {
               CUP$SqlParser$result = case97(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // partition_key_list ::= KW_MAX_VALUE 
            {
               CUP$SqlParser$result = case96(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // partition_key_list ::= STRING_LITERAL 
            {
               CUP$SqlParser$result = case95(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // partition_key_list ::= partition_key_list COMMA KW_MAX_VALUE 
            {
               CUP$SqlParser$result = case94(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // partition_key_list ::= partition_key_list COMMA STRING_LITERAL 
            {
               CUP$SqlParser$result = case93(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // partition_key_list ::= 
            {
               CUP$SqlParser$result = case92(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // partition_key_desc ::= LPAREN partition_key_list RPAREN 
            {
               CUP$SqlParser$result = case91(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // partition_key_desc ::= KW_MAX_VALUE 
            {
               CUP$SqlParser$result = case90(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // single_range_partition_desc ::= KW_PARTITION opt_if_not_exists ident KW_VALUES fixed_partition_key_desc opt_key_value_map 
            {
               CUP$SqlParser$result = case89(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // single_range_partition_desc ::= KW_PARTITION opt_if_not_exists ident KW_VALUES KW_LESS KW_THAN partition_key_desc opt_key_value_map 
            {
               CUP$SqlParser$result = case88(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // single_range_partition_desc_list ::= single_range_partition_desc 
            {
               CUP$SqlParser$result = case87(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // single_range_partition_desc_list ::= single_range_partition_desc_list COMMA single_range_partition_desc 
            {
               CUP$SqlParser$result = case86(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // opt_single_range_partition_desc_list ::= single_range_partition_desc_list 
            {
               CUP$SqlParser$result = case85(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // opt_single_range_partition_desc_list ::= 
            {
               CUP$SqlParser$result = case84(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // opt_keys ::= KW_AGGREGATE KW_KEY LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case83(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // opt_keys ::= KW_UNIQUE KW_KEY LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case82(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // opt_keys ::= KW_DUPLICATE KW_KEY LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case81(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // opt_keys ::= 
            {
               CUP$SqlParser$result = case80(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // opt_distribution_number ::= KW_BUCKETS INTEGER_LITERAL 
            {
               CUP$SqlParser$result = case79(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // opt_distribution_number ::= 
            {
               CUP$SqlParser$result = case78(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // opt_rollup ::= KW_ROLLUP LPAREN add_rollup_clause_list RPAREN 
            {
               CUP$SqlParser$result = case77(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // opt_rollup ::= 
            {
               CUP$SqlParser$result = case76(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // opt_distribution ::= KW_DISTRIBUTED KW_BY KW_RANDOM opt_distribution_number 
            {
               CUP$SqlParser$result = case75(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // opt_distribution ::= KW_DISTRIBUTED KW_BY KW_HASH LPAREN ident_list RPAREN opt_distribution_number 
            {
               CUP$SqlParser$result = case74(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // opt_distribution ::= 
            {
               CUP$SqlParser$result = case73(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // partition_names ::= KW_TEMPORARY KW_PARTITION ident 
            {
               CUP$SqlParser$result = case72(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // partition_names ::= KW_PARTITION ident 
            {
               CUP$SqlParser$result = case71(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // partition_names ::= KW_TEMPORARY KW_PARTITIONS LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case70(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // partition_names ::= KW_PARTITIONS LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case69(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // partition_names ::= KW_TEMPORARY KW_PARTITION LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case68(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // partition_names ::= KW_PARTITION LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case67(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // opt_partition_names ::= partition_names 
            {
               CUP$SqlParser$result = case66(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // opt_partition_names ::= 
            {
               CUP$SqlParser$result = case65(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // opt_force ::= KW_FORCE 
            {
               CUP$SqlParser$result = case64(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // opt_force ::= 
            {
               CUP$SqlParser$result = case63(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // opt_if_exists ::= KW_IF KW_EXISTS 
            {
               CUP$SqlParser$result = case62(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // opt_if_exists ::= 
            {
               CUP$SqlParser$result = case61(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // opt_tmp ::= KW_TEMPORARY 
            {
               CUP$SqlParser$result = case60(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // opt_tmp ::= 
            {
               CUP$SqlParser$result = case59(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // opt_partition ::= KW_PARTITION KW_BY KW_RANGE LPAREN ident_list RPAREN LPAREN opt_single_range_partition_desc_list RPAREN 
            {
               CUP$SqlParser$result = case58(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // opt_partition ::= 
            {
               CUP$SqlParser$result = case57(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // opt_agg_type ::= KW_BITMAP_UNION 
            {
               CUP$SqlParser$result = case56(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // opt_agg_type ::= KW_HLL_UNION 
            {
               CUP$SqlParser$result = case55(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // opt_agg_type ::= KW_REPLACE_IF_NOT_NULL 
            {
               CUP$SqlParser$result = case54(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // opt_agg_type ::= KW_REPLACE 
            {
               CUP$SqlParser$result = case53(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // opt_agg_type ::= KW_MIN 
            {
               CUP$SqlParser$result = case52(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // opt_agg_type ::= KW_MAX 
            {
               CUP$SqlParser$result = case51(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // opt_agg_type ::= KW_SUM 
            {
               CUP$SqlParser$result = case50(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // opt_agg_type ::= 
            {
               CUP$SqlParser$result = case49(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // opt_enable_feature_properties ::= KW_WITH KW_PROPERTIES LPAREN key_value_map RPAREN 
            {
               CUP$SqlParser$result = case48(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // opt_enable_feature_properties ::= 
            {
               CUP$SqlParser$result = case47(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // alter_table_clause ::= KW_ENABLE KW_FEATURE STRING_LITERAL opt_enable_feature_properties 
            {
               CUP$SqlParser$result = case46(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // alter_table_clause ::= KW_DROP KW_INDEX ident 
            {
               CUP$SqlParser$result = case45(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // alter_table_clause ::= KW_ADD index_definition 
            {
               CUP$SqlParser$result = case44(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // alter_table_clause ::= KW_RENAME KW_COLUMN ident ident 
            {
               CUP$SqlParser$result = case43(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // alter_table_clause ::= KW_RENAME KW_PARTITION ident ident 
            {
               CUP$SqlParser$result = case42(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // alter_table_clause ::= KW_RENAME KW_ROLLUP ident ident 
            {
               CUP$SqlParser$result = case41(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // alter_table_clause ::= KW_RENAME ident 
            {
               CUP$SqlParser$result = case40(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // alter_table_clause ::= KW_REPLACE KW_WITH KW_TABLE ident opt_properties 
            {
               CUP$SqlParser$result = case39(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // alter_table_clause ::= KW_REPLACE opt_partition_names KW_WITH opt_partition_names opt_properties 
            {
               CUP$SqlParser$result = case38(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // alter_table_clause ::= KW_MODIFY KW_PARTITION LPAREN STAR RPAREN KW_SET LPAREN key_value_map RPAREN 
            {
               CUP$SqlParser$result = case37(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // alter_table_clause ::= KW_MODIFY KW_PARTITION LPAREN ident_list RPAREN KW_SET LPAREN key_value_map RPAREN 
            {
               CUP$SqlParser$result = case36(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // alter_table_clause ::= KW_MODIFY KW_PARTITION ident KW_SET LPAREN key_value_map RPAREN 
            {
               CUP$SqlParser$result = case35(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // alter_table_clause ::= KW_DROP opt_tmp KW_PARTITION opt_if_exists ident opt_force 
            {
               CUP$SqlParser$result = case34(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // alter_table_clause ::= KW_ADD opt_tmp single_range_partition_desc opt_distribution opt_properties 
            {
               CUP$SqlParser$result = case33(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // alter_table_clause ::= KW_SET LPAREN key_value_map RPAREN 
            {
               CUP$SqlParser$result = case32(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // alter_table_clause ::= KW_ORDER KW_BY LPAREN ident_list RPAREN opt_from_rollup opt_properties 
            {
               CUP$SqlParser$result = case31(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // alter_table_clause ::= KW_MODIFY KW_COLUMN column_definition opt_col_pos opt_from_rollup opt_properties 
            {
               CUP$SqlParser$result = case30(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // alter_table_clause ::= KW_DROP KW_COLUMN ident opt_from_rollup opt_properties 
            {
               CUP$SqlParser$result = case29(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // alter_table_clause ::= KW_ADD KW_COLUMN LPAREN column_definition_list RPAREN opt_to_rollup opt_properties 
            {
               CUP$SqlParser$result = case28(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // alter_table_clause ::= KW_ADD KW_COLUMN column_definition opt_col_pos opt_to_rollup opt_properties 
            {
               CUP$SqlParser$result = case27(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // alter_table_clause_list ::= alter_table_clause_list COMMA alter_table_clause 
            {
               CUP$SqlParser$result = case26(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // alter_table_clause_list ::= alter_table_clause 
            {
               CUP$SqlParser$result = case25(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // alter_stmt ::= KW_ALTER KW_TABLE table_name KW_DROP KW_ROLLUP drop_rollup_clause_list 
            {
               CUP$SqlParser$result = case24(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // alter_stmt ::= KW_ALTER KW_TABLE table_name KW_ADD KW_ROLLUP add_rollup_clause_list 
            {
               CUP$SqlParser$result = case23(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // alter_stmt ::= KW_ALTER KW_TABLE table_name alter_table_clause_list 
            {
               CUP$SqlParser$result = case22(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // create_stmt ::= KW_CREATE opt_external KW_TABLE opt_if_not_exists table_name LPAREN column_definition_list COMMA index_definition_list RPAREN opt_engine opt_keys opt_comment opt_partition opt_distribution opt_rollup opt_properties opt_ext_properties 
            {
               CUP$SqlParser$result = case21(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // create_stmt ::= KW_CREATE opt_external KW_TABLE opt_if_not_exists table_name LPAREN column_definition_list RPAREN opt_engine opt_keys opt_comment opt_partition opt_distribution opt_rollup opt_properties opt_ext_properties 
            {
               CUP$SqlParser$result = case20(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // create_stmt ::= KW_CREATE opt_external KW_TABLE opt_if_not_exists table_name KW_LIKE table_name 
            {
               CUP$SqlParser$result = case19(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opt_dup_keys ::= KW_DUPLICATE KW_KEY LPAREN ident_list RPAREN 
            {
               CUP$SqlParser$result = case18(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opt_dup_keys ::= 
            {
               CUP$SqlParser$result = case17(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opt_col_pos ::= KW_AFTER ident 
            {
               CUP$SqlParser$result = case16(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opt_col_pos ::= KW_FIRST 
            {
               CUP$SqlParser$result = case15(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // opt_col_pos ::= 
            {
               CUP$SqlParser$result = case14(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // opt_from_rollup ::= KW_FROM ident 
            {
               CUP$SqlParser$result = case13(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // opt_from_rollup ::= 
            {
               CUP$SqlParser$result = case12(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // opt_to_rollup ::= KW_IN ident 
            {
               CUP$SqlParser$result = case11(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // opt_to_rollup ::= KW_TO ident 
            {
               CUP$SqlParser$result = case10(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // opt_to_rollup ::= 
            {
               CUP$SqlParser$result = case9(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // add_rollup_clause_list ::= add_rollup_clause_list COMMA add_rollup_clause 
            {
               CUP$SqlParser$result = case8(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // add_rollup_clause_list ::= add_rollup_clause 
            {
               CUP$SqlParser$result = case7(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // add_rollup_clause ::= ident LPAREN ident_list RPAREN opt_dup_keys opt_from_rollup opt_properties 
            {
               CUP$SqlParser$result = case6(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= 
            {
               CUP$SqlParser$result = case5(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= create_stmt 
            {
               CUP$SqlParser$result = case4(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt ::= alter_stmt 
            {
               CUP$SqlParser$result = case3(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmts ::= stmts SEMICOLON stmt 
            {
               CUP$SqlParser$result = case2(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // stmts ::= stmt 
            {
               CUP$SqlParser$result = case1(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= stmts EOF 
            {
               CUP$SqlParser$result = case0(
                 CUP$SqlParser$act_num,
                 CUP$SqlParser$parser,
                 CUP$SqlParser$stack,
                 CUP$SqlParser$top);
            }
          /* ACCEPT */
          CUP$SqlParser$parser.done_parsing();
          return CUP$SqlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }/*1*/
    //time_unit ::= KW_SECOND 
    java_cup.runtime.Symbol case310(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("time_unit",47, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //time_unit ::= KW_MINUTE 
    java_cup.runtime.Symbol case309(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("time_unit",47, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //time_unit ::= KW_HOUR 
    java_cup.runtime.Symbol case308(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("time_unit",47, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //time_unit ::= KW_DAY 
    java_cup.runtime.Symbol case307(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("time_unit",47, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //time_unit ::= KW_WEEK 
    java_cup.runtime.Symbol case306(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("time_unit",47, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //time_unit ::= KW_MONTH 
    java_cup.runtime.Symbol case305(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("time_unit",47, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //time_unit ::= KW_YEAR 
    java_cup.runtime.Symbol case304(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("time_unit",47, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //ident ::= keyword 
    java_cup.runtime.Symbol case303(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = id;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("ident",46, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //ident ::= IDENT 
    java_cup.runtime.Symbol case302(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = id;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("ident",46, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_FEATURE 
    java_cup.runtime.Symbol case301(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_ENABLE 
    java_cup.runtime.Symbol case300(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= time_unit 
    java_cup.runtime.Symbol case299(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_DYNAMIC 
    java_cup.runtime.Symbol case298(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_GROUPING 
    java_cup.runtime.Symbol case297(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_STOP 
    java_cup.runtime.Symbol case296(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_RESUME 
    java_cup.runtime.Symbol case295(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_PAUSE 
    java_cup.runtime.Symbol case294(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_ROUTINE 
    java_cup.runtime.Symbol case293(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_TASK 
    java_cup.runtime.Symbol case292(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_FREE 
    java_cup.runtime.Symbol case291(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_MAX 
    java_cup.runtime.Symbol case290(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_MIN 
    java_cup.runtime.Symbol case289(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_SUM 
    java_cup.runtime.Symbol case288(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_COUNT 
    java_cup.runtime.Symbol case287(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_MIGRATIONS 
    java_cup.runtime.Symbol case286(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_MIGRATE 
    java_cup.runtime.Symbol case285(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_LINK 
    java_cup.runtime.Symbol case284(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_CLUSTERS 
    java_cup.runtime.Symbol case283(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_CLUSTER 
    java_cup.runtime.Symbol case282(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_WORK 
    java_cup.runtime.Symbol case281(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_WARNINGS 
    java_cup.runtime.Symbol case280(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_VIEW 
    java_cup.runtime.Symbol case279(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_VERBOSE 
    java_cup.runtime.Symbol case278(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_VALUE 
    java_cup.runtime.Symbol case277(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_VARIABLES 
    java_cup.runtime.Symbol case276(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_USER 
    java_cup.runtime.Symbol case275(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_UNCOMMITTED 
    java_cup.runtime.Symbol case274(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_TYPES 
    java_cup.runtime.Symbol case273(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_TYPE 
    java_cup.runtime.Symbol case272(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_TRUNCATE 
    java_cup.runtime.Symbol case271(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_TRIGGERS 
    java_cup.runtime.Symbol case270(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_TRANSACTION 
    java_cup.runtime.Symbol case269(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_TIMESTAMP 
    java_cup.runtime.Symbol case268(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_THAN 
    java_cup.runtime.Symbol case267(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_TEMPORARY 
    java_cup.runtime.Symbol case266(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_TABLES 
    java_cup.runtime.Symbol case265(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_STRING 
    java_cup.runtime.Symbol case264(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_STORAGE 
    java_cup.runtime.Symbol case263(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_STATUS 
    java_cup.runtime.Symbol case262(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_START 
    java_cup.runtime.Symbol case261(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_SPLIT 
    java_cup.runtime.Symbol case260(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_SONAME 
    java_cup.runtime.Symbol case259(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_SNAPSHOT 
    java_cup.runtime.Symbol case258(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_SESSION 
    java_cup.runtime.Symbol case257(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_SERIALIZABLE 
    java_cup.runtime.Symbol case256(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_SCHEMA 
    java_cup.runtime.Symbol case255(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_ROLLUP 
    java_cup.runtime.Symbol case254(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_ROLLBACK 
    java_cup.runtime.Symbol case253(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_RETURNS 
    java_cup.runtime.Symbol case252(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_RESTORE 
    java_cup.runtime.Symbol case251(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_RESOURCES 
    java_cup.runtime.Symbol case250(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_RESOURCE 
    java_cup.runtime.Symbol case249(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_REPOSITORIES 
    java_cup.runtime.Symbol case248(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_REPOSITORY 
    java_cup.runtime.Symbol case247(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_REPLACE_IF_NOT_NULL 
    java_cup.runtime.Symbol case246(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_REPLACE 
    java_cup.runtime.Symbol case245(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_REPEATABLE 
    java_cup.runtime.Symbol case244(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_RECOVER 
    java_cup.runtime.Symbol case243(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_RANDOM 
    java_cup.runtime.Symbol case242(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_QUOTA 
    java_cup.runtime.Symbol case241(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_QUERY 
    java_cup.runtime.Symbol case240(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_PROPERTY 
    java_cup.runtime.Symbol case239(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_PROPERTIES 
    java_cup.runtime.Symbol case238(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_PROCESSLIST 
    java_cup.runtime.Symbol case237(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_PROC 
    java_cup.runtime.Symbol case236(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_PLUGINS 
    java_cup.runtime.Symbol case235(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_PLUGIN 
    java_cup.runtime.Symbol case234(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_PASSWORD 
    java_cup.runtime.Symbol case233(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_PARTITIONS 
    java_cup.runtime.Symbol case232(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_OPEN 
    java_cup.runtime.Symbol case231(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_ONLY 
    java_cup.runtime.Symbol case230(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_OFFSET 
    java_cup.runtime.Symbol case229(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_NULLS 
    java_cup.runtime.Symbol case228(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_NO 
    java_cup.runtime.Symbol case227(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_NEGATIVE 
    java_cup.runtime.Symbol case226(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_NAMES 
    java_cup.runtime.Symbol case225(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_NAME 
    java_cup.runtime.Symbol case224(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_MODIFY 
    java_cup.runtime.Symbol case223(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_MERGE 
    java_cup.runtime.Symbol case222(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_MATERIALIZED 
    java_cup.runtime.Symbol case221(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_LOCATION 
    java_cup.runtime.Symbol case220(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_LOCAL 
    java_cup.runtime.Symbol case219(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_LEVEL 
    java_cup.runtime.Symbol case218(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_LESS 
    java_cup.runtime.Symbol case217(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_LAST 
    java_cup.runtime.Symbol case216(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_LABEL 
    java_cup.runtime.Symbol case215(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_ISOLATION 
    java_cup.runtime.Symbol case214(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_ISNULL 
    java_cup.runtime.Symbol case213(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_INDEXES 
    java_cup.runtime.Symbol case212(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_IDENTIFIED 
    java_cup.runtime.Symbol case211(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_HUB 
    java_cup.runtime.Symbol case210(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_HELP 
    java_cup.runtime.Symbol case209(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_HASH 
    java_cup.runtime.Symbol case208(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_GLOBAL 
    java_cup.runtime.Symbol case207(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_EXTERNAL 
    java_cup.runtime.Symbol case206(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_EVENTS 
    java_cup.runtime.Symbol case205(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_EXCLUDE 
    java_cup.runtime.Symbol case204(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_ERRORS 
    java_cup.runtime.Symbol case203(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_ENGINES 
    java_cup.runtime.Symbol case202(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_ENGINE 
    java_cup.runtime.Symbol case201(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_END 
    java_cup.runtime.Symbol case200(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_FUNCTION 
    java_cup.runtime.Symbol case199(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_PATH 
    java_cup.runtime.Symbol case198(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_HLL_UNION 
    java_cup.runtime.Symbol case197(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_FORMAT 
    java_cup.runtime.Symbol case196(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_FIRST 
    java_cup.runtime.Symbol case195(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_FILTER 
    java_cup.runtime.Symbol case194(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_FILE 
    java_cup.runtime.Symbol case193(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_BUCKETS 
    java_cup.runtime.Symbol case192(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_DISTINCTPCSA 
    java_cup.runtime.Symbol case191(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_DISTINCTPC 
    java_cup.runtime.Symbol case190(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_DATETIME 
    java_cup.runtime.Symbol case189(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_DATE 
    java_cup.runtime.Symbol case188(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_DATA 
    java_cup.runtime.Symbol case187(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_CONVERT 
    java_cup.runtime.Symbol case186(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_CONNECTION_ID 
    java_cup.runtime.Symbol case185(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_CONNECTION 
    java_cup.runtime.Symbol case184(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_CONFIG 
    java_cup.runtime.Symbol case183(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_COMMIT 
    java_cup.runtime.Symbol case182(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_COLLATION 
    java_cup.runtime.Symbol case181(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_CONSISTENT 
    java_cup.runtime.Symbol case180(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_COMMITTED 
    java_cup.runtime.Symbol case179(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_COMMENT 
    java_cup.runtime.Symbol case178(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_COLUMNS 
    java_cup.runtime.Symbol case177(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_CHECK 
    java_cup.runtime.Symbol case176(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_CHARSET 
    java_cup.runtime.Symbol case175(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_CHAIN 
    java_cup.runtime.Symbol case174(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_BUILTIN 
    java_cup.runtime.Symbol case173(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_BACKENDS 
    java_cup.runtime.Symbol case172(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_HDFS 
    java_cup.runtime.Symbol case171(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_S3 
    java_cup.runtime.Symbol case170(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_BROKER 
    java_cup.runtime.Symbol case169(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_BOOLEAN 
    java_cup.runtime.Symbol case168(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_BITMAP_UNION 
    java_cup.runtime.Symbol case167(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_BITMAP 
    java_cup.runtime.Symbol case166(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_BEGIN 
    java_cup.runtime.Symbol case165(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_BACKUP 
    java_cup.runtime.Symbol case164(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_AUTHORS 
    java_cup.runtime.Symbol case163(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_AGGREGATE 
    java_cup.runtime.Symbol case162(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //keyword ::= KW_AFTER 
    java_cup.runtime.Symbol case161(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int idleft = CUP$SqlParser$stack.peek().left;
		int idright = CUP$SqlParser$stack.peek().right;
		String id = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = id; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("keyword",45, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type_def ::= type 
    java_cup.runtime.Symbol case160(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      TypeDef RESULT =null;/*3*/
		int tleft = CUP$SqlParser$stack.peek().left;
		int tright = CUP$SqlParser$stack.peek().right;
		Type t = (Type) CUP$SqlParser$stack.peek().value;
		 RESULT = new TypeDef(t); /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type_def",6, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_signed_unsigned ::= KW_UNSIGNED 
    java_cup.runtime.Symbol case159(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		 RESULT = false; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_signed_unsigned",56, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_signed_unsigned ::= KW_SIGNED 
    java_cup.runtime.Symbol case158(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		 RESULT = true; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_signed_unsigned",56, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_signed_unsigned ::= 
    java_cup.runtime.Symbol case157(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		 RESULT = true; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_signed_unsigned",56, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_field_length ::= 
    java_cup.runtime.Symbol case156(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Long RESULT =null;/*3*/
		 RESULT = null; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_field_length",21, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_field_length ::= LPAREN INTEGER_LITERAL RPAREN 
    java_cup.runtime.Symbol case155(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Long RESULT =null;/*3*/
		int lengthleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int lengthright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Long length = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = length; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_field_length",21, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_HLL 
    java_cup.runtime.Symbol case154(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 ScalarType type = ScalarType.createHllType();
     type.setAssignedStrLenInColDefinition();
     RESULT = type;
  /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_DECIMAL 
    java_cup.runtime.Symbol case153(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = ScalarType.createDecimalV2Type(); /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_DECIMAL LPAREN INTEGER_LITERAL COMMA INTEGER_LITERAL RPAREN 
    java_cup.runtime.Symbol case152(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		int precisionleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int precisionright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Long precision = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int scaleleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int scaleright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Long scale = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = ScalarType.createDecimalV2Type(precision.intValue(), scale.intValue()); /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_DECIMAL LPAREN INTEGER_LITERAL RPAREN 
    java_cup.runtime.Symbol case151(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		int precisionleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int precisionright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Long precision = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 RESULT = ScalarType.createDecimalV2Type(precision.intValue()); /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_CHAR 
    java_cup.runtime.Symbol case150(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = ScalarType.createCharType(-1); /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_CHAR LPAREN INTEGER_LITERAL RPAREN 
    java_cup.runtime.Symbol case149(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		int lenleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int lenright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Long len = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 ScalarType type = ScalarType.createCharType(len.intValue());
     type.setAssignedStrLenInColDefinition();
     RESULT = type;
  /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_VARCHAR 
    java_cup.runtime.Symbol case148(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = ScalarType.createVarcharType(-1); /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_VARCHAR LPAREN INTEGER_LITERAL RPAREN 
    java_cup.runtime.Symbol case147(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		int lenleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int lenright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Long len = (Long) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		 ScalarType type = ScalarType.createVarcharType(len.intValue());
     type.setAssignedStrLenInColDefinition();
     RESULT = type;
  /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_STRING 
    java_cup.runtime.Symbol case146(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = ScalarType.createVarcharType(-1); /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_BITMAP 
    java_cup.runtime.Symbol case145(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = Type.BITMAP; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_TIME 
    java_cup.runtime.Symbol case144(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = Type.TIME; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_DATETIME 
    java_cup.runtime.Symbol case143(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = Type.DATETIME; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_DATE 
    java_cup.runtime.Symbol case142(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = Type.DATE; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_DOUBLE 
    java_cup.runtime.Symbol case141(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = Type.DOUBLE; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_FLOAT 
    java_cup.runtime.Symbol case140(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = Type.FLOAT; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_BOOLEAN 
    java_cup.runtime.Symbol case139(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = Type.BOOLEAN; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_LARGEINT opt_field_length 
    java_cup.runtime.Symbol case138(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = Type.LARGEINT; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_BIGINT opt_field_length 
    java_cup.runtime.Symbol case137(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = Type.BIGINT; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= opt_signed_unsigned KW_INT opt_field_length 
    java_cup.runtime.Symbol case136(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = Type.INT; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_SMALLINT opt_field_length 
    java_cup.runtime.Symbol case135(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = Type.SMALLINT; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //type ::= KW_TINYINT opt_field_length 
    java_cup.runtime.Symbol case134(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Type RESULT =null;/*3*/
		 RESULT = Type.TINYINT; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("type",7, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //ident_list ::= ident_list COMMA ident 
    java_cup.runtime.Symbol case133(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<String> RESULT =null;/*3*/
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<String> list = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int identleft = CUP$SqlParser$stack.peek().left;
		int identright = CUP$SqlParser$stack.peek().right;
		String ident = (String) CUP$SqlParser$stack.peek().value;
		
      list.add(ident);
      RESULT = list;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("ident_list",4, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //ident_list ::= ident 
    java_cup.runtime.Symbol case132(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<String> RESULT =null;/*3*/
		int identleft = CUP$SqlParser$stack.peek().left;
		int identright = CUP$SqlParser$stack.peek().right;
		String ident = (String) CUP$SqlParser$stack.peek().value;
		
      ArrayList<String> list = new ArrayList<String>();
      list.add(ident);
      RESULT = list;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("ident_list",4, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //table_name ::= ident DOT ident 
    java_cup.runtime.Symbol case131(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      TableName RESULT =null;/*3*/
		int dbleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int dbright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String db = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int tblleft = CUP$SqlParser$stack.peek().left;
		int tblright = CUP$SqlParser$stack.peek().right;
		String tbl = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = new TableName(db, tbl); /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_name",5, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //table_name ::= ident 
    java_cup.runtime.Symbol case130(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      TableName RESULT =null;/*3*/
		int tblleft = CUP$SqlParser$stack.peek().left;
		int tblright = CUP$SqlParser$stack.peek().right;
		String tbl = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = new TableName(null, tbl); /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_name",5, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_external ::= KW_EXTERNAL 
    java_cup.runtime.Symbol case129(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		
        RESULT = true;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_external",53, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_external ::= 
    java_cup.runtime.Symbol case128(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		
        RESULT = false;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_external",53, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_if_not_exists ::= KW_IF KW_NOT KW_EXISTS 
    java_cup.runtime.Symbol case127(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		
        RESULT = true;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_if_not_exists",51, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_if_not_exists ::= 
    java_cup.runtime.Symbol case126(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		
        RESULT = false;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_if_not_exists",51, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_index_type ::= KW_USING KW_BITMAP 
    java_cup.runtime.Symbol case125(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      IndexDef.IndexType RESULT =null;/*3*/
		
        RESULT = IndexDef.IndexType.BITMAP;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_index_type",55, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_index_type ::= 
    java_cup.runtime.Symbol case124(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      IndexDef.IndexType RESULT =null;/*3*/
		
        RESULT = null;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_index_type",55, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_comment ::= KW_COMMENT STRING_LITERAL 
    java_cup.runtime.Symbol case123(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int commentleft = CUP$SqlParser$stack.peek().left;
		int commentright = CUP$SqlParser$stack.peek().right;
		String comment = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = comment;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_comment",48, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_comment ::= 
    java_cup.runtime.Symbol case122(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		
        RESULT = "";
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_comment",48, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_is_allow_null ::= KW_NOT KW_NULL 
    java_cup.runtime.Symbol case121(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		
        RESULT = false;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_allow_null",33, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_is_allow_null ::= KW_NULL 
    java_cup.runtime.Symbol case120(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		
        RESULT = true;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_allow_null",33, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_is_allow_null ::= 
    java_cup.runtime.Symbol case119(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		
        RESULT = true;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_allow_null",33, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //index_definition ::= KW_INDEX ident LPAREN ident_list RPAREN opt_index_type opt_comment 
    java_cup.runtime.Symbol case118(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      IndexDef RESULT =null;/*3*/
		int indexNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int indexNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		String indexName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int colsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int colsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		ArrayList<String> cols = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int indexTypeleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int indexTyperight = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		IndexDef.IndexType indexType = (IndexDef.IndexType) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int commentleft = CUP$SqlParser$stack.peek().left;
		int commentright = CUP$SqlParser$stack.peek().right;
		String comment = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new IndexDef(indexName, cols, indexType, comment);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("index_definition",14, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //column_definition ::= ident type_def opt_is_key opt_agg_type opt_is_allow_null opt_default_value opt_comment 
    java_cup.runtime.Symbol case117(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnDef RESULT =null;/*3*/
		int columnNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int columnNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		String columnName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int typeDefleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int typeDefright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		TypeDef typeDef = (TypeDef) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int isKeyleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int isKeyright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		Boolean isKey = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int aggTypeleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int aggTyperight = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		AggregateType aggType = (AggregateType) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int isAllowNullleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int isAllowNullright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Boolean isAllowNull = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int defaultValueleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int defaultValueright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ColumnDef.DefaultValue defaultValue = (ColumnDef.DefaultValue) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int commentleft = CUP$SqlParser$stack.peek().left;
		int commentright = CUP$SqlParser$stack.peek().right;
		String comment = (String) CUP$SqlParser$stack.peek().value;
		
        ColumnDef columnDef = new ColumnDef(columnName, typeDef, isKey, aggType, isAllowNull, defaultValue, comment);
        RESULT = columnDef;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_definition",13, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_is_key ::= KW_KEY 
    java_cup.runtime.Symbol case116(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		int keyleft = CUP$SqlParser$stack.peek().left;
		int keyright = CUP$SqlParser$stack.peek().right;
		String key = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = true;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_key",34, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_is_key ::= 
    java_cup.runtime.Symbol case115(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		
        RESULT = false;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_is_key",34, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_default_value ::= KW_DEFAULT KW_NULL 
    java_cup.runtime.Symbol case114(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnDef.DefaultValue RESULT =null;/*3*/
		
        RESULT = ColumnDef.DefaultValue.NULL_DEFAULT_VALUE;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_default_value",50, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_default_value ::= KW_DEFAULT STRING_LITERAL 
    java_cup.runtime.Symbol case113(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnDef.DefaultValue RESULT =null;/*3*/
		int valueleft = CUP$SqlParser$stack.peek().left;
		int valueright = CUP$SqlParser$stack.peek().right;
		String value = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ColumnDef.DefaultValue(true, value);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_default_value",50, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_default_value ::= 
    java_cup.runtime.Symbol case112(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnDef.DefaultValue RESULT =null;/*3*/
		
        RESULT = ColumnDef.DefaultValue.NOT_SET;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_default_value",50, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //index_definition_list ::= index_definition_list COMMA index_definition 
    java_cup.runtime.Symbol case111(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<IndexDef> RESULT =null;/*3*/
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<IndexDef> list = (ArrayList<IndexDef>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int indexleft = CUP$SqlParser$stack.peek().left;
		int indexright = CUP$SqlParser$stack.peek().right;
		IndexDef index = (IndexDef) CUP$SqlParser$stack.peek().value;
		
        list.add(index);
        RESULT = list;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("index_definition_list",16, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //index_definition_list ::= index_definition 
    java_cup.runtime.Symbol case110(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<IndexDef> RESULT =null;/*3*/
		int indexleft = CUP$SqlParser$stack.peek().left;
		int indexright = CUP$SqlParser$stack.peek().right;
		IndexDef index = (IndexDef) CUP$SqlParser$stack.peek().value;
		
        RESULT = Lists.newArrayList();
        RESULT.add(index);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("index_definition_list",16, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //column_definition_list ::= column_definition_list COMMA column_definition 
    java_cup.runtime.Symbol case109(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<ColumnDef> RESULT =null;/*3*/
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<ColumnDef> list = (ArrayList<ColumnDef>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int columnleft = CUP$SqlParser$stack.peek().left;
		int columnright = CUP$SqlParser$stack.peek().right;
		ColumnDef column = (ColumnDef) CUP$SqlParser$stack.peek().value;
		
    list.add(column);
    RESULT = list;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_definition_list",15, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //column_definition_list ::= column_definition 
    java_cup.runtime.Symbol case108(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ArrayList<ColumnDef> RESULT =null;/*3*/
		int columnleft = CUP$SqlParser$stack.peek().left;
		int columnright = CUP$SqlParser$stack.peek().right;
		ColumnDef column = (ColumnDef) CUP$SqlParser$stack.peek().value;
		
    RESULT = Lists.newArrayList();
    RESULT.add(column);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column_definition_list",15, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_ext_properties ::= KW_BROKER KW_PROPERTIES LPAREN key_value_map RPAREN 
    java_cup.runtime.Symbol case107(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;/*3*/
		int mapleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int mapright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> map = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
    RESULT = map;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_ext_properties",11, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_ext_properties ::= 
    java_cup.runtime.Symbol case106(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;/*3*/
		
    RESULT = null;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_ext_properties",11, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_properties ::= KW_PROPERTIES LPAREN key_value_map RPAREN 
    java_cup.runtime.Symbol case105(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;/*3*/
		int mapleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int mapright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> map = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
    RESULT = map;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_properties",10, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_properties ::= 
    java_cup.runtime.Symbol case104(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;/*3*/
		
    RESULT = null;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_properties",10, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //key_value_map ::= key_value_map COMMA STRING_LITERAL EQUAL STRING_LITERAL 
    java_cup.runtime.Symbol case103(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;/*3*/
		int mapleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int mapright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		Map<String,String> map = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String name = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int valueleft = CUP$SqlParser$stack.peek().left;
		int valueright = CUP$SqlParser$stack.peek().right;
		String value = (String) CUP$SqlParser$stack.peek().value;
		
    map.put(name, value);
    RESULT = map;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("key_value_map",8, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //key_value_map ::= STRING_LITERAL EQUAL STRING_LITERAL 
    java_cup.runtime.Symbol case102(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;/*3*/
		int nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String name = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int valueleft = CUP$SqlParser$stack.peek().left;
		int valueright = CUP$SqlParser$stack.peek().right;
		String value = (String) CUP$SqlParser$stack.peek().value;
		
    RESULT = Maps.newHashMap();
    RESULT.put(name, value);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("key_value_map",8, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_key_value_map ::= LPAREN key_value_map RPAREN 
    java_cup.runtime.Symbol case101(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;/*3*/
		int mapleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int mapright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> map = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
    RESULT = map;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_key_value_map",9, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_key_value_map ::= 
    java_cup.runtime.Symbol case100(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;/*3*/
		
    RESULT = Maps.newHashMap();
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_key_value_map",9, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_engine ::= KW_ENGINE EQUAL ident 
    java_cup.runtime.Symbol case99(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int engineNameleft = CUP$SqlParser$stack.peek().left;
		int engineNameright = CUP$SqlParser$stack.peek().right;
		String engineName = (String) CUP$SqlParser$stack.peek().value;
		 RESULT = engineName; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_engine",49, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_engine ::= 
    java_cup.runtime.Symbol case98(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		 RESULT = null; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_engine",49, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //fixed_partition_key_desc ::= LBRACKET LPAREN partition_key_list RPAREN COMMA LPAREN partition_key_list RPAREN RPAREN 
    java_cup.runtime.Symbol case97(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionKeyDesc RESULT =null;/*3*/
		int lowerleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int lowerright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		List<PartitionValue> lower = (List<PartitionValue>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int upperleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int upperright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<PartitionValue> upper = (List<PartitionValue>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		
        RESULT = new PartitionKeyDesc(lower, upper);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("fixed_partition_key_desc",26, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //partition_key_list ::= KW_MAX_VALUE 
    java_cup.runtime.Symbol case96(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<PartitionValue> RESULT =null;/*3*/
		
        RESULT = Lists.newArrayList(PartitionValue.MAX_VALUE);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_list",27, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //partition_key_list ::= STRING_LITERAL 
    java_cup.runtime.Symbol case95(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<PartitionValue> RESULT =null;/*3*/
		int itemleft = CUP$SqlParser$stack.peek().left;
		int itemright = CUP$SqlParser$stack.peek().right;
		String item = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = Lists.newArrayList(new PartitionValue(item));
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_list",27, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //partition_key_list ::= partition_key_list COMMA KW_MAX_VALUE 
    java_cup.runtime.Symbol case94(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<PartitionValue> RESULT =null;/*3*/
		int lleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int lright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<PartitionValue> l = (List<PartitionValue>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		
        l.add(PartitionValue.MAX_VALUE);
        RESULT = l;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_list",27, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //partition_key_list ::= partition_key_list COMMA STRING_LITERAL 
    java_cup.runtime.Symbol case93(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<PartitionValue> RESULT =null;/*3*/
		int lleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int lright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<PartitionValue> l = (List<PartitionValue>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int itemleft = CUP$SqlParser$stack.peek().left;
		int itemright = CUP$SqlParser$stack.peek().right;
		String item = (String) CUP$SqlParser$stack.peek().value;
		
        l.add(new PartitionValue(item));
        RESULT = l;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_list",27, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //partition_key_list ::= 
    java_cup.runtime.Symbol case92(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<PartitionValue> RESULT =null;/*3*/
		
        List<PartitionValue> l = new ArrayList<PartitionValue>();
        RESULT = l;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_list",27, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //partition_key_desc ::= LPAREN partition_key_list RPAREN 
    java_cup.runtime.Symbol case91(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionKeyDesc RESULT =null;/*3*/
		int keysleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int keysright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		List<PartitionValue> keys = (List<PartitionValue>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new PartitionKeyDesc(keys);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_desc",25, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //partition_key_desc ::= KW_MAX_VALUE 
    java_cup.runtime.Symbol case90(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionKeyDesc RESULT =null;/*3*/
		
        RESULT = PartitionKeyDesc.createMaxKeyDesc();
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_key_desc",25, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //single_range_partition_desc ::= KW_PARTITION opt_if_not_exists ident KW_VALUES fixed_partition_key_desc opt_key_value_map 
    java_cup.runtime.Symbol case89(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SingleRangePartitionDesc RESULT =null;/*3*/
		int ifNotExistsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int ifNotExistsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		Boolean ifNotExists = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int partNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int partNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		String partName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int descleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int descright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		PartitionKeyDesc desc = (PartitionKeyDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SingleRangePartitionDesc(ifNotExists, partName, desc, properties);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("single_range_partition_desc",28, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //single_range_partition_desc ::= KW_PARTITION opt_if_not_exists ident KW_VALUES KW_LESS KW_THAN partition_key_desc opt_key_value_map 
    java_cup.runtime.Symbol case88(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      SingleRangePartitionDesc RESULT =null;/*3*/
		int ifNotExistsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int ifNotExistsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		Boolean ifNotExists = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int partNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int partNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		String partName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int descleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int descright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		PartitionKeyDesc desc = (PartitionKeyDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new SingleRangePartitionDesc(ifNotExists, partName, desc, properties);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("single_range_partition_desc",28, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //single_range_partition_desc_list ::= single_range_partition_desc 
    java_cup.runtime.Symbol case87(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SingleRangePartitionDesc> RESULT =null;/*3*/
		int descleft = CUP$SqlParser$stack.peek().left;
		int descright = CUP$SqlParser$stack.peek().right;
		SingleRangePartitionDesc desc = (SingleRangePartitionDesc) CUP$SqlParser$stack.peek().value;
		
        RESULT = Lists.newArrayList(desc);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("single_range_partition_desc_list",30, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //single_range_partition_desc_list ::= single_range_partition_desc_list COMMA single_range_partition_desc 
    java_cup.runtime.Symbol case86(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SingleRangePartitionDesc> RESULT =null;/*3*/
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<SingleRangePartitionDesc> list = (List<SingleRangePartitionDesc>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int descleft = CUP$SqlParser$stack.peek().left;
		int descright = CUP$SqlParser$stack.peek().right;
		SingleRangePartitionDesc desc = (SingleRangePartitionDesc) CUP$SqlParser$stack.peek().value;
		
        list.add(desc);
        RESULT = list;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("single_range_partition_desc_list",30, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_single_range_partition_desc_list ::= single_range_partition_desc_list 
    java_cup.runtime.Symbol case85(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SingleRangePartitionDesc> RESULT =null;/*3*/
		int listleft = CUP$SqlParser$stack.peek().left;
		int listright = CUP$SqlParser$stack.peek().right;
		List<SingleRangePartitionDesc> list = (List<SingleRangePartitionDesc>) CUP$SqlParser$stack.peek().value;
		
        RESULT = list;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_single_range_partition_desc_list",29, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_single_range_partition_desc_list ::= 
    java_cup.runtime.Symbol case84(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<SingleRangePartitionDesc> RESULT =null;/*3*/
		
        RESULT = null;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_single_range_partition_desc_list",29, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_keys ::= KW_AGGREGATE KW_KEY LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case83(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      KeysDesc RESULT =null;/*3*/
		int keysleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int keysright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> keys = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new KeysDesc(KeysType.AGG_KEYS, keys);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_keys",22, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_keys ::= KW_UNIQUE KW_KEY LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case82(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      KeysDesc RESULT =null;/*3*/
		int keysleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int keysright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> keys = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new KeysDesc(KeysType.UNIQUE_KEYS, keys);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_keys",22, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_keys ::= KW_DUPLICATE KW_KEY LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case81(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      KeysDesc RESULT =null;/*3*/
		int keysleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int keysright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> keys = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new KeysDesc(KeysType.DUP_KEYS, keys);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_keys",22, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_keys ::= 
    java_cup.runtime.Symbol case80(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      KeysDesc RESULT =null;/*3*/
		
        RESULT = null;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_keys",22, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_distribution_number ::= KW_BUCKETS INTEGER_LITERAL 
    java_cup.runtime.Symbol case79(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Integer RESULT =null;/*3*/
		int numDistributionleft = CUP$SqlParser$stack.peek().left;
		int numDistributionright = CUP$SqlParser$stack.peek().right;
		Long numDistribution = (Long) CUP$SqlParser$stack.peek().value;
		
        RESULT = numDistribution.intValue();
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_distribution_number",20, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_distribution_number ::= 
    java_cup.runtime.Symbol case78(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Integer RESULT =null;/*3*/
		
        /* If distribution number is null, default distribution number is 10. */
        RESULT = 10;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_distribution_number",20, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_rollup ::= KW_ROLLUP LPAREN add_rollup_clause_list RPAREN 
    java_cup.runtime.Symbol case77(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<AlterClause> RESULT =null;/*3*/
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		List<AlterClause> list = (List<AlterClause>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = list;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_rollup",41, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_rollup ::= 
    java_cup.runtime.Symbol case76(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<AlterClause> RESULT =null;/*3*/
		
        RESULT = new ArrayList<>();
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_rollup",41, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_distribution ::= KW_DISTRIBUTED KW_BY KW_RANDOM opt_distribution_number 
    java_cup.runtime.Symbol case75(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      DistributionDesc RESULT =null;/*3*/
		int numDistributionleft = CUP$SqlParser$stack.peek().left;
		int numDistributionright = CUP$SqlParser$stack.peek().right;
		Integer numDistribution = (Integer) CUP$SqlParser$stack.peek().value;
		
        RESULT = new RandomDistributionDesc(numDistribution);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_distribution",19, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_distribution ::= KW_DISTRIBUTED KW_BY KW_HASH LPAREN ident_list RPAREN opt_distribution_number 
    java_cup.runtime.Symbol case74(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      DistributionDesc RESULT =null;/*3*/
		int columnsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int columnsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ArrayList<String> columns = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int numDistributionleft = CUP$SqlParser$stack.peek().left;
		int numDistributionright = CUP$SqlParser$stack.peek().right;
		Integer numDistribution = (Integer) CUP$SqlParser$stack.peek().value;
		
        RESULT = new HashDistributionDesc(numDistribution, columns);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_distribution",19, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_distribution ::= 
    java_cup.runtime.Symbol case73(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      DistributionDesc RESULT =null;/*3*/
		
        RESULT = null;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_distribution",19, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //partition_names ::= KW_TEMPORARY KW_PARTITION ident 
    java_cup.runtime.Symbol case72(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionNames RESULT =null;/*3*/
		int partNameleft = CUP$SqlParser$stack.peek().left;
		int partNameright = CUP$SqlParser$stack.peek().right;
		String partName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new PartitionNames(true, Lists.newArrayList(partName));
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_names",24, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //partition_names ::= KW_PARTITION ident 
    java_cup.runtime.Symbol case71(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionNames RESULT =null;/*3*/
		int partNameleft = CUP$SqlParser$stack.peek().left;
		int partNameright = CUP$SqlParser$stack.peek().right;
		String partName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new PartitionNames(false, Lists.newArrayList(partName));
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_names",24, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //partition_names ::= KW_TEMPORARY KW_PARTITIONS LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case70(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionNames RESULT =null;/*3*/
		int partitionsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int partitionsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> partitions = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new PartitionNames(true, partitions);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_names",24, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //partition_names ::= KW_PARTITIONS LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case69(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionNames RESULT =null;/*3*/
		int partitionsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int partitionsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> partitions = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new PartitionNames(false, partitions);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_names",24, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //partition_names ::= KW_TEMPORARY KW_PARTITION LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case68(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionNames RESULT =null;/*3*/
		int partitionsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int partitionsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> partitions = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new PartitionNames(true, partitions);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_names",24, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //partition_names ::= KW_PARTITION LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case67(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionNames RESULT =null;/*3*/
		int partitionsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int partitionsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> partitions = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new PartitionNames(false, partitions);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("partition_names",24, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_partition_names ::= partition_names 
    java_cup.runtime.Symbol case66(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionNames RESULT =null;/*3*/
		int partitionNamesleft = CUP$SqlParser$stack.peek().left;
		int partitionNamesright = CUP$SqlParser$stack.peek().right;
		PartitionNames partitionNames = (PartitionNames) CUP$SqlParser$stack.peek().value;
		
        RESULT = partitionNames;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_names",23, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_partition_names ::= 
    java_cup.runtime.Symbol case65(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionNames RESULT =null;/*3*/
		
        RESULT = null;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition_names",23, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_force ::= KW_FORCE 
    java_cup.runtime.Symbol case64(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		
        RESULT = true;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_force",54, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_force ::= 
    java_cup.runtime.Symbol case63(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		
        RESULT = false;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_force",54, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_if_exists ::= KW_IF KW_EXISTS 
    java_cup.runtime.Symbol case62(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		
        RESULT = true;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_if_exists",52, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_if_exists ::= 
    java_cup.runtime.Symbol case61(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		
        RESULT = false;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_if_exists",52, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_tmp ::= KW_TEMPORARY 
    java_cup.runtime.Symbol case60(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		
        RESULT = true;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_tmp",38, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_tmp ::= 
    java_cup.runtime.Symbol case59(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Boolean RESULT =null;/*3*/
		
        RESULT = false;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_tmp",38, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_partition ::= KW_PARTITION KW_BY KW_RANGE LPAREN ident_list RPAREN LPAREN opt_single_range_partition_desc_list RPAREN 
    java_cup.runtime.Symbol case58(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionDesc RESULT =null;/*3*/
		int columnsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int columnsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		ArrayList<String> columns = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		List<SingleRangePartitionDesc> list = (List<SingleRangePartitionDesc>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new RangePartitionDesc(columns, list);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition",18, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_partition ::= 
    java_cup.runtime.Symbol case57(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      PartitionDesc RESULT =null;/*3*/
		
        RESULT = null;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_partition",18, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_agg_type ::= KW_BITMAP_UNION 
    java_cup.runtime.Symbol case56(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AggregateType RESULT =null;/*3*/
		
    RESULT = AggregateType.BITMAP_UNION;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_agg_type",17, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_agg_type ::= KW_HLL_UNION 
    java_cup.runtime.Symbol case55(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AggregateType RESULT =null;/*3*/
		
    RESULT = AggregateType.HLL_UNION;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_agg_type",17, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_agg_type ::= KW_REPLACE_IF_NOT_NULL 
    java_cup.runtime.Symbol case54(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AggregateType RESULT =null;/*3*/
		
    RESULT = AggregateType.REPLACE_IF_NOT_NULL;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_agg_type",17, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_agg_type ::= KW_REPLACE 
    java_cup.runtime.Symbol case53(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AggregateType RESULT =null;/*3*/
		
    RESULT = AggregateType.REPLACE;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_agg_type",17, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_agg_type ::= KW_MIN 
    java_cup.runtime.Symbol case52(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AggregateType RESULT =null;/*3*/
		
    RESULT = AggregateType.MIN;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_agg_type",17, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_agg_type ::= KW_MAX 
    java_cup.runtime.Symbol case51(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AggregateType RESULT =null;/*3*/
		
    RESULT = AggregateType.MAX;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_agg_type",17, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_agg_type ::= KW_SUM 
    java_cup.runtime.Symbol case50(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AggregateType RESULT =null;/*3*/
		
    RESULT = AggregateType.SUM;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_agg_type",17, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_agg_type ::= 
    java_cup.runtime.Symbol case49(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AggregateType RESULT =null;/*3*/
		 RESULT = null; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_agg_type",17, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_enable_feature_properties ::= KW_WITH KW_PROPERTIES LPAREN key_value_map RPAREN 
    java_cup.runtime.Symbol case48(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;/*3*/
		int mapleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int mapright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> map = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
    RESULT = map;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_enable_feature_properties",12, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_enable_feature_properties ::= 
    java_cup.runtime.Symbol case47(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Map<String,String> RESULT =null;/*3*/
		
    RESULT = null;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_enable_feature_properties",12, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_ENABLE KW_FEATURE STRING_LITERAL opt_enable_feature_properties 
    java_cup.runtime.Symbol case46(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int featureNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int featureNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String featureName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new EnableFeatureClause(featureName, properties);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_DROP KW_INDEX ident 
    java_cup.runtime.Symbol case45(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int indexNameleft = CUP$SqlParser$stack.peek().left;
		int indexNameright = CUP$SqlParser$stack.peek().right;
		String indexName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropIndexClause(indexName, null, true);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_ADD index_definition 
    java_cup.runtime.Symbol case44(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int indexDefleft = CUP$SqlParser$stack.peek().left;
		int indexDefright = CUP$SqlParser$stack.peek().right;
		IndexDef indexDef = (IndexDef) CUP$SqlParser$stack.peek().value;
		
        RESULT = new CreateIndexClause(null, indexDef, true);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_RENAME KW_COLUMN ident ident 
    java_cup.runtime.Symbol case43(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int colNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int colNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String colName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int newColNameleft = CUP$SqlParser$stack.peek().left;
		int newColNameright = CUP$SqlParser$stack.peek().right;
		String newColName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ColumnRenameClause(colName, newColName);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_RENAME KW_PARTITION ident ident 
    java_cup.runtime.Symbol case42(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int partitionNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int partitionNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String partitionName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int newPartitionNameleft = CUP$SqlParser$stack.peek().left;
		int newPartitionNameright = CUP$SqlParser$stack.peek().right;
		String newPartitionName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new PartitionRenameClause(partitionName, newPartitionName);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_RENAME KW_ROLLUP ident ident 
    java_cup.runtime.Symbol case41(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int rollupNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int rollupNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String rollupName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int newRollupNameleft = CUP$SqlParser$stack.peek().left;
		int newRollupNameright = CUP$SqlParser$stack.peek().right;
		String newRollupName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new RollupRenameClause(rollupName, newRollupName);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_RENAME ident 
    java_cup.runtime.Symbol case40(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int newTableNameleft = CUP$SqlParser$stack.peek().left;
		int newTableNameright = CUP$SqlParser$stack.peek().right;
		String newTableName = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new TableRenameClause(newTableName);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_REPLACE KW_WITH KW_TABLE ident opt_properties 
    java_cup.runtime.Symbol case39(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int tblNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int tblNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String tblName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ReplaceTableClause(tblName, properties);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_REPLACE opt_partition_names KW_WITH opt_partition_names opt_properties 
    java_cup.runtime.Symbol case38(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int partitionsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int partitionsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		PartitionNames partitions = (PartitionNames) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int tempPartitionsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int tempPartitionsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		PartitionNames tempPartitions = (PartitionNames) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ReplacePartitionClause(partitions, tempPartitions, properties);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_MODIFY KW_PARTITION LPAREN STAR RPAREN KW_SET LPAREN key_value_map RPAREN 
    java_cup.runtime.Symbol case37(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int propertiesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int propertiesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = ModifyPartitionClause.createStarClause(properties);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_MODIFY KW_PARTITION LPAREN ident_list RPAREN KW_SET LPAREN key_value_map RPAREN 
    java_cup.runtime.Symbol case36(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int partitionsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int partitionsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		ArrayList<String> partitions = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int propertiesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int propertiesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new ModifyPartitionClause(partitions, properties);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_MODIFY KW_PARTITION ident KW_SET LPAREN key_value_map RPAREN 
    java_cup.runtime.Symbol case35(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int partitionNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int partitionNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		String partitionName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int propertiesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int propertiesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        ArrayList<String> partitions = new ArrayList<String>();
        partitions.add(partitionName);
        RESULT = new ModifyPartitionClause(partitions, properties);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_DROP opt_tmp KW_PARTITION opt_if_exists ident opt_force 
    java_cup.runtime.Symbol case34(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int isTempPartitionleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int isTempPartitionright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		Boolean isTempPartition = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int ifExistsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int ifExistsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		Boolean ifExists = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int partitionNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int partitionNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String partitionName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int forceleft = CUP$SqlParser$stack.peek().left;
		int forceright = CUP$SqlParser$stack.peek().right;
		Boolean force = (Boolean) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropPartitionClause(ifExists, partitionName, isTempPartition, force ? force : isTempPartition);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_ADD opt_tmp single_range_partition_desc opt_distribution opt_properties 
    java_cup.runtime.Symbol case33(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int isTempPartitionleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int isTempPartitionright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Boolean isTempPartition = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int descleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int descright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		SingleRangePartitionDesc desc = (SingleRangePartitionDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int distributionleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int distributionright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		DistributionDesc distribution = (DistributionDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AddPartitionClause(desc, distribution, properties, isTempPartition);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_SET LPAREN key_value_map RPAREN 
    java_cup.runtime.Symbol case32(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int propertiesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int propertiesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = new ModifyTablePropertiesClause(properties);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_ORDER KW_BY LPAREN ident_list RPAREN opt_from_rollup opt_properties 
    java_cup.runtime.Symbol case31(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int colsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int colsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		ArrayList<String> cols = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int rollupleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int rollupright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String rollup = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ReorderColumnsClause(cols, rollup, properties);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_MODIFY KW_COLUMN column_definition opt_col_pos opt_from_rollup opt_properties 
    java_cup.runtime.Symbol case30(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int colleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int colright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		ColumnDef col = (ColumnDef) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int col_posleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int col_posright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ColumnPosition col_pos = (ColumnPosition) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int rollupleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int rollupright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String rollup = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ModifyColumnClause(col, col_pos, rollup, properties);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_DROP KW_COLUMN ident opt_from_rollup opt_properties 
    java_cup.runtime.Symbol case29(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int colleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int colright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		String col = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int rollupleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int rollupright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String rollup = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new DropColumnClause(col, rollup, properties);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_ADD KW_COLUMN LPAREN column_definition_list RPAREN opt_to_rollup opt_properties 
    java_cup.runtime.Symbol case28(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int colsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int colsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		ArrayList<ColumnDef> cols = (ArrayList<ColumnDef>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int rollupleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int rollupright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String rollup = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AddColumnsClause(cols, rollup, properties);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause ::= KW_ADD KW_COLUMN column_definition opt_col_pos opt_to_rollup opt_properties 
    java_cup.runtime.Symbol case27(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AlterClause RESULT =null;/*3*/
		int colleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int colright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		ColumnDef col = (ColumnDef) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int col_posleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int col_posright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		ColumnPosition col_pos = (ColumnPosition) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int rollupleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int rollupright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String rollup = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AddColumnClause(col, col_pos, rollup, properties);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause",39, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause_list ::= alter_table_clause_list COMMA alter_table_clause 
    java_cup.runtime.Symbol case26(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<AlterClause> RESULT =null;/*3*/
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<AlterClause> list = (List<AlterClause>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int clauseleft = CUP$SqlParser$stack.peek().left;
		int clauseright = CUP$SqlParser$stack.peek().right;
		AlterClause clause = (AlterClause) CUP$SqlParser$stack.peek().value;
		
        list.add(clause);
        RESULT = list;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause_list",40, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_table_clause_list ::= alter_table_clause 
    java_cup.runtime.Symbol case25(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<AlterClause> RESULT =null;/*3*/
		int clauseleft = CUP$SqlParser$stack.peek().left;
		int clauseright = CUP$SqlParser$stack.peek().right;
		AlterClause clause = (AlterClause) CUP$SqlParser$stack.peek().value;
		
        RESULT = Lists.newArrayList(clause);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_table_clause_list",40, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_stmt ::= KW_ALTER KW_TABLE table_name KW_DROP KW_ROLLUP drop_rollup_clause_list 
    java_cup.runtime.Symbol case24(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;/*3*/
		int tblleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int tblright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		TableName tbl = (TableName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int clausesleft = CUP$SqlParser$stack.peek().left;
		int clausesright = CUP$SqlParser$stack.peek().right;
		List<AlterClause> clauses = (List<AlterClause>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AlterTableStmt(tbl, clauses);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_stmt",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_stmt ::= KW_ALTER KW_TABLE table_name KW_ADD KW_ROLLUP add_rollup_clause_list 
    java_cup.runtime.Symbol case23(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;/*3*/
		int tblleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int tblright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		TableName tbl = (TableName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int clausesleft = CUP$SqlParser$stack.peek().left;
		int clausesright = CUP$SqlParser$stack.peek().right;
		List<AlterClause> clauses = (List<AlterClause>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AlterTableStmt(tbl, clauses);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_stmt",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //alter_stmt ::= KW_ALTER KW_TABLE table_name alter_table_clause_list 
    java_cup.runtime.Symbol case22(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;/*3*/
		int tblleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int tblright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		TableName tbl = (TableName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int clausesleft = CUP$SqlParser$stack.peek().left;
		int clausesright = CUP$SqlParser$stack.peek().right;
		List<AlterClause> clauses = (List<AlterClause>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AlterTableStmt(tbl, clauses);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("alter_stmt",3, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //create_stmt ::= KW_CREATE opt_external KW_TABLE opt_if_not_exists table_name LPAREN column_definition_list COMMA index_definition_list RPAREN opt_engine opt_keys opt_comment opt_partition opt_distribution opt_rollup opt_properties opt_ext_properties 
    java_cup.runtime.Symbol case21(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;/*3*/
		int isExternalleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-16).left;
		int isExternalright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-16).right;
		Boolean isExternal = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-16).value;
		int ifNotExistsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14).left;
		int ifNotExistsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14).right;
		Boolean ifNotExists = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14).value;
		int nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13).left;
		int nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13).right;
		TableName name = (TableName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-13).value;
		int columnsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11).left;
		int columnsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11).right;
		ArrayList<ColumnDef> columns = (ArrayList<ColumnDef>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11).value;
		int indexesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9).left;
		int indexesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9).right;
		ArrayList<IndexDef> indexes = (ArrayList<IndexDef>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9).value;
		int engineNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).left;
		int engineNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).right;
		String engineName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).value;
		int keysleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int keysright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		KeysDesc keys = (KeysDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int tableCommentleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int tableCommentright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		String tableComment = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int partitionleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int partitionright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		PartitionDesc partition = (PartitionDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int distributionleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int distributionright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		DistributionDesc distribution = (DistributionDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int indexleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int indexright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<AlterClause> index = (List<AlterClause>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int tblPropertiesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int tblPropertiesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> tblProperties = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int extPropertiesleft = CUP$SqlParser$stack.peek().left;
		int extPropertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> extProperties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new CreateTableStmt(ifNotExists, isExternal, name, columns, indexes, engineName, keys, partition,
        distribution, tblProperties, extProperties, tableComment, index);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_stmt",2, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-17), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //create_stmt ::= KW_CREATE opt_external KW_TABLE opt_if_not_exists table_name LPAREN column_definition_list RPAREN opt_engine opt_keys opt_comment opt_partition opt_distribution opt_rollup opt_properties opt_ext_properties 
    java_cup.runtime.Symbol case20(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;/*3*/
		int isExternalleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14).left;
		int isExternalright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14).right;
		Boolean isExternal = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-14).value;
		int ifNotExistsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12).left;
		int ifNotExistsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12).right;
		Boolean ifNotExists = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-12).value;
		int nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11).left;
		int nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11).right;
		TableName name = (TableName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-11).value;
		int columnsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9).left;
		int columnsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9).right;
		ArrayList<ColumnDef> columns = (ArrayList<ColumnDef>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9).value;
		int engineNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).left;
		int engineNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).right;
		String engineName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7).value;
		int keysleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int keysright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		KeysDesc keys = (KeysDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int tableCommentleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int tableCommentright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		String tableComment = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int partitionleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int partitionright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		PartitionDesc partition = (PartitionDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int distributionleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int distributionright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		DistributionDesc distribution = (DistributionDesc) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int indexleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int indexright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<AlterClause> index = (List<AlterClause>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int tblPropertiesleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int tblPropertiesright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		Map<String,String> tblProperties = (Map<String,String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int extPropertiesleft = CUP$SqlParser$stack.peek().left;
		int extPropertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> extProperties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new CreateTableStmt(ifNotExists, isExternal, name, columns, engineName, keys, partition,
        distribution, tblProperties, extProperties, tableComment, index);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_stmt",2, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-15), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //create_stmt ::= KW_CREATE opt_external KW_TABLE opt_if_not_exists table_name KW_LIKE table_name 
    java_cup.runtime.Symbol case19(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;/*3*/
		int isExternalleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).left;
		int isExternalright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).right;
		Boolean isExternal = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5).value;
		int ifNotExistsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).left;
		int ifNotExistsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).right;
		Boolean ifNotExists = (Boolean) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3).value;
		int nameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int nameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		TableName name = (TableName) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int existed_nameleft = CUP$SqlParser$stack.peek().left;
		int existed_nameright = CUP$SqlParser$stack.peek().right;
		TableName existed_name = (TableName) CUP$SqlParser$stack.peek().value;
		
        RESULT = new CreateTableLikeStmt(ifNotExists, name, existed_name);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("create_stmt",2, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_dup_keys ::= KW_DUPLICATE KW_KEY LPAREN ident_list RPAREN 
    java_cup.runtime.Symbol case18(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<String> RESULT =null;/*3*/
		int colsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int colsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		ArrayList<String> cols = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		
        RESULT = cols;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_dup_keys",31, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_dup_keys ::= 
    java_cup.runtime.Symbol case17(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<String> RESULT =null;/*3*/
		
        RESULT = null;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_dup_keys",31, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_col_pos ::= KW_AFTER ident 
    java_cup.runtime.Symbol case16(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnPosition RESULT =null;/*3*/
		int colleft = CUP$SqlParser$stack.peek().left;
		int colright = CUP$SqlParser$stack.peek().right;
		String col = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = new ColumnPosition(col);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_col_pos",37, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_col_pos ::= KW_FIRST 
    java_cup.runtime.Symbol case15(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnPosition RESULT =null;/*3*/
		
        RESULT = ColumnPosition.FIRST;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_col_pos",37, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_col_pos ::= 
    java_cup.runtime.Symbol case14(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      ColumnPosition RESULT =null;/*3*/
		
        RESULT = null;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_col_pos",37, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_from_rollup ::= KW_FROM ident 
    java_cup.runtime.Symbol case13(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int rollupleft = CUP$SqlParser$stack.peek().left;
		int rollupright = CUP$SqlParser$stack.peek().right;
		String rollup = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = rollup;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_from_rollup",35, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_from_rollup ::= 
    java_cup.runtime.Symbol case12(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		
        RESULT = null;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_from_rollup",35, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_to_rollup ::= KW_IN ident 
    java_cup.runtime.Symbol case11(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int rollupleft = CUP$SqlParser$stack.peek().left;
		int rollupright = CUP$SqlParser$stack.peek().right;
		String rollup = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = rollup;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_to_rollup",36, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_to_rollup ::= KW_TO ident 
    java_cup.runtime.Symbol case10(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		int rollupleft = CUP$SqlParser$stack.peek().left;
		int rollupright = CUP$SqlParser$stack.peek().right;
		String rollup = (String) CUP$SqlParser$stack.peek().value;
		
        RESULT = rollup;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_to_rollup",36, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //opt_to_rollup ::= 
    java_cup.runtime.Symbol case9(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      String RESULT =null;/*3*/
		
        RESULT = null;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("opt_to_rollup",36, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //add_rollup_clause_list ::= add_rollup_clause_list COMMA add_rollup_clause 
    java_cup.runtime.Symbol case8(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<AlterClause> RESULT =null;/*3*/
		int listleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int listright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<AlterClause> list = (List<AlterClause>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int clauseleft = CUP$SqlParser$stack.peek().left;
		int clauseright = CUP$SqlParser$stack.peek().right;
		AddRollupClause clause = (AddRollupClause) CUP$SqlParser$stack.peek().value;
		
        list.add(clause);
        RESULT = list;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("add_rollup_clause_list",42, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //add_rollup_clause_list ::= add_rollup_clause 
    java_cup.runtime.Symbol case7(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<AlterClause> RESULT =null;/*3*/
		int clauseleft = CUP$SqlParser$stack.peek().left;
		int clauseright = CUP$SqlParser$stack.peek().right;
		AddRollupClause clause = (AddRollupClause) CUP$SqlParser$stack.peek().value;
		
        RESULT = Lists.newArrayList(clause);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("add_rollup_clause_list",42, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //add_rollup_clause ::= ident LPAREN ident_list RPAREN opt_dup_keys opt_from_rollup opt_properties 
    java_cup.runtime.Symbol case6(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      AddRollupClause RESULT =null;/*3*/
		int rollupNameleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).left;
		int rollupNameright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).right;
		String rollupName = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6).value;
		int colsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).left;
		int colsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).right;
		ArrayList<String> cols = (ArrayList<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4).value;
		int dup_keysleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int dup_keysright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<String> dup_keys = (List<String>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int baseRollupleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int baseRollupright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		String baseRollup = (String) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		int propertiesleft = CUP$SqlParser$stack.peek().left;
		int propertiesright = CUP$SqlParser$stack.peek().right;
		Map<String,String> properties = (Map<String,String>) CUP$SqlParser$stack.peek().value;
		
        RESULT = new AddRollupClause(rollupName, cols, dup_keys, baseRollup, properties);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("add_rollup_clause",44, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //stmt ::= 
    java_cup.runtime.Symbol case5(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;/*3*/
		
         RESULT = new EmptyStmt();
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //stmt ::= create_stmt 
    java_cup.runtime.Symbol case4(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;/*3*/
		int queryleft = CUP$SqlParser$stack.peek().left;
		int queryright = CUP$SqlParser$stack.peek().right;
		StatementBase query = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = query; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //stmt ::= alter_stmt 
    java_cup.runtime.Symbol case3(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      StatementBase RESULT =null;/*3*/
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		 RESULT = stmt; /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmt",1, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //stmts ::= stmts SEMICOLON stmt 
    java_cup.runtime.Symbol case2(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<StatementBase> RESULT =null;/*3*/
		int stmtsleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).left;
		int stmtsright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).right;
		List<StatementBase> stmts = (List<StatementBase>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2).value;
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		
        stmts.add(stmt);
        RESULT = stmts;
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmts",0, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //stmts ::= stmt 
    java_cup.runtime.Symbol case1(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      List<StatementBase> RESULT =null;/*3*/
		int stmtleft = CUP$SqlParser$stack.peek().left;
		int stmtright = CUP$SqlParser$stack.peek().right;
		StatementBase stmt = (StatementBase) CUP$SqlParser$stack.peek().value;
		
        RESULT = Lists.newArrayList(stmt);
    /*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stmts",0, CUP$SqlParser$stack.peek(), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
    //$START ::= stmts EOF 
    java_cup.runtime.Symbol case0(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$SqlParser$result;
      Object RESULT =null;/*3*/
		int start_valleft = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).left;
		int start_valright = CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).right;
		List<StatementBase> start_val = (List<StatementBase>) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1).value;
		RESULT = start_val;/*5*/
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1), CUP$SqlParser$stack.peek(), RESULT); /*6*/
      return CUP$SqlParser$result;/*8*/

    }
}

